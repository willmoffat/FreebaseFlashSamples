////  FilmSpinNode//  Created by Ketan Anjaria on 2007-03-05.//  Copyright (c) 2007 __MyCompanyName__. All rights reserved.//package com.metaweb.samples.filmspin {	import flash.display.*		import flash.text.*;	import flash.events.*;	import flash.net.*;	import flash.external.*;		import metaliq.core.*	import com.adobe.serialization.json.*;			import com.metaweb.*;	import com.kidbombay.shapes.*;		import caurina.transitions.*;	import com.metaweb.samples.filmspin.*;		public class FilmSpinNode extends Component {				public var image:ExternalAsset;		public var imageMask:Sprite;		public var imageMissing:Sprite;		public var imageMissing_txt:TextField;		public var label_txt:TextField;		public var type_txt:TextField;		public var imageHighlight:Sprite;		public var bg:Sprite;		public var highlight:Sprite;		public var bgMask:RoundRect;		public var shadow:MovieClip;		public var selectedBG:Sprite;		public var metaData_btn:FrameButton;		public var metaData:MovieClip;		public var defaultImageSize:Number=126;				/**		 * Creates a new FilmSpinNode component instance.		 * com.metaweb.samples.filmspin.FilmSpinNode		 */		public function FilmSpinNode() { 			super();		}				override protected function configUI() : void {			super.configUI();			mouseChildren = true;			$width = 140;			$height = 45			cacheAsBitmap = true;			hasImage = false;												image.addEventListener("complete", onLoadImage, false, 0, true);						selected = false;						addEventListener(MouseEvent.ROLL_OVER, onOver, false, 0, true);			addEventListener(MouseEvent.ROLL_OUT, onOut, false, 0, true);						hitRegion.addEventListener(MouseEvent.CLICK, onClick, false, 0, true);						metaData_btn.bringToFront();			metaData_btn.alpha = 0;			metaData_btn.addEventListener(MouseEvent.CLICK, onClickMetaData, false, 0, true);						metaData.contentMask.scaleX = 0;			metaData.go_btn.addEventListener(MouseEvent.CLICK, onClickGo, false, 0, true);					}		public function enableMetaData(p_enable):void{			metaData_btn.visible = p_enable;		}		public function setImageSize(w:Number,h:Number):void{			imageHighlight.width = w;			imageHighlight.height = h* .65;			image.setSize(w,h)			imageMask.width = w;			imageMask.height = h;			imageMissing.width = w;			imageMissing.height = h;						imageMissing_txt.width = w-4;			imageMissing_txt.y = h/2 + image.y;		}		private function onClick(p_event:Event):void{			dispatchEvent(new Event("itemClick"))		}		private function onClickMetaData(p_event:Event):void{			showMetaData(true);			dispatchEvent(new Event("itemClickMetaData"))		}		private function onOver(p_event:Event):void{			selectedBG.visible = true;						Tweener.addTween(metaData_btn, { alpha:1, time:FilmSpin.HALF_ANIMATION_SPEED, transition:"linear"});					}		private function onOut(p_event:Event):void{			Tweener.addTween(metaData_btn, { alpha:0, time:FilmSpin.HALF_ANIMATION_SPEED, transition:"linear"});			if(!$selected) {				selectedBG.visible = false;			}		}		override public function draw() : void {						hitRegion.width = shadow.width = bgMask.width = selectedBG.width = bg.width = $width;			hitRegion.height = shadow.height = bgMask.height = selectedBG.height = bg.height = $height;			highlight.width = $width;			highlight.height = $height * .44;						type_txt.width = label_txt.width = $width - label_txt.x*2;						metaData.x = $width - 8;						if(!$hasImage) {				label_txt.y = 5;				type_txt.y = 20;			} else {				label_txt.y = $height - 38;				type_txt.y = $height - 23;			}						metaData_btn.x = $width - 18;			metaData_btn.y = type_txt.y+1;						super.draw();		}		protected var $selected:Boolean=false;		public function set selected(p_selected:Boolean):void{			$selected = p_selected;			selectedBG.visible = $selected;		}		public function get selected():Boolean{			return $selected;		}		protected var $hasImage:Boolean=false;		public function set hasImage(p_hasImage:Boolean):void{			$hasImage = p_hasImage;			imageHighlight.visible = $hasImage;		}		public function get hasImage():Boolean{			return $hasImage;		}		protected var $dataModel:Object;		public function set dataModel(p_dataModel:Object):void{			$dataModel = p_dataModel;			label_txt.text = $dataModel.name;							var type:String = $dataModel.type;			var typeLabel:String;			var fields:String="";			var values:String="";			var dobs:Array;			var dob:String;						var nations:Array;			var nationality:String;						if(type == "/film/film") {				fields = "Release Date :\n"				fields += "Minutes :\n"								values = $dataModel.initial_release_date != null ? $dataModel.initial_release_date : ""				values +="\n";				dobs = $dataModel["runtime"]				if(dobs != null && dobs.length > 0) {					values += dobs[0].runtime 				}												typeLabel = "Film";			} else if(type == "/film/actor") {				fields = "Born :\n";				fields += "Nationality :\n"								dobs = $dataModel["/people/person/date_of_birth"]				if(dobs != null && dobs.length > 0) {					dob = dobs[0].value;				}				values += dob != null ? dob : ""				values +="\n";								nations = $dataModel["/people/person/nationality"]				if(nations != null && nations.length > 0) {					nationality = nations[0].name;				}				values += nationality != null ? nationality : ""				values +="\n";								typeLabel = "Actor"			} else if(type == "/film/director") {				fields = "Born :\n";				fields += "Nationality :\n";								dobs = $dataModel["/people/person/date_of_birth"]				if(dobs != null && dobs.length > 0) {					dob = dobs[0].value;				}				values += dob != null ? dob : "";				values +="\n";				nations = $dataModel["/people/person/nationality"]				if(nations != null && nations.length > 0) {					nationality = nations[0].name;				}				values += nationality != null ? nationality : ""				values +="\n";								typeLabel = "Director"			}			fields += "Freebase Page :\n"				metaData.fields_txt.text = fields;			metaData.values_txt.text = values;						type_txt.text = typeLabel;						//default image size			var imageWidth:Number = defaultImageSize;			var imageHeight:Number = Math.ceil(imageWidth * 1.48);			if(type != "/film/film") {				imageHeight = defaultImageSize			}						hasImage = true;			setImageSize(imageWidth,imageHeight)			setSize(image.x*2+image.width,image.y*2+image.height + 36)							var images:Array = $dataModel["/common/topic/image"];						if(images.length > 0) {				loadImage(DataManager.getThumbURL(images[0].guid,image.width,image.height))				} else {							}					}		public function get dataModel():Object{			return $dataModel;		}				public function loadImage(p_url:String):void{						image.load(p_url);			//image.load("content/titanic_small.jpg")			image.visible = false;					}				private function onLoadImage(p_event:Event):void{			image.alpha = 0;			image.visible = true;			imageMissing_txt.visible = false;			imageMissing.visible = false;			if(image.content != null ) {				if(image.assetWidth < image.width) {					image.content.x = (image.width - image.assetWidth)/2;				}				if(image.assetHeight < image.height) {										image.content.y = (image.height - image.assetHeight)/2;				}			}									Tweener.addTween(image, { alpha:1, time:FilmSpin.ANIMATION_SPEED, transition:"linear"});		}		public function showMetaData(p_show):void{					var newScale:Number = p_show ? 1 : 0;			Tweener.addTween(metaData.contentMask, { scaleX:newScale, time:FilmSpin.ANIMATION_SPEED, transition:"easeOutBack"});			if(p_show) {				getArticle();			}		}		public function getArticle():void{			var articles:Array = $dataModel["/common/topic/article"]			if(articles != null && articles.length > 0) {				var id:String = articles[0].id;				trace("id = " + id);				DataManager.getBlurb(id,300,onGetBlurb)			}		}		private function onGetBlurb(p_event:Event):void{			var loader:URLLoader = p_event.target as URLLoader;			trace(loader.data)			metaData.body_txt.text = loader.data;		}		private function onClickGo(p_event:Event):void{			var url:String = DataManager.getLink($dataModel.guid)			trace("url = " + url);			var request:URLRequest = new URLRequest(url);			navigateToURL(request,"_blank")		}		protected var $angle:Number=0;		public function set angle(p_angle:Number):void{			$angle = p_angle;					}		public function get angle():Number{			return $angle;		}	}}