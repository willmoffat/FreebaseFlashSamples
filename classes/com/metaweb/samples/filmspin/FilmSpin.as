////  FilmSpin//  Created by Ketan Anjaria on 2007-03-05.//  Copyright (c) 2007 __MyCompanyName__. All rights reserved.///*TODO* adjust height of image highlightadd link to metaweb page* add search button* add progress indicator* add rollovers* make people look different than moviespass cookie in from javascript* get images at correct sizesupport for non english fonts* add "Add Image" or no image by defaultdata roll overwith roleblurb* add limit to results* add search for actors and directors*/package com.metaweb.samples.filmspin {	import flash.display.*		import flash.text.*;	import flash.events.*;	import flash.net.*;	import flash.utils.*;	import flash.external.*;		import fl.controls.TextArea;	import com.metaweb.*;	import com.adobe.serialization.json.*;	import caurina.transitions.*;		import com.kidbombay.shapes.*;	import com.kidbombay.util.*;		public class FilmSpin extends MovieClip {				public var bg:Sprite;		public var logo:MovieClip;		public var search:MovieClip;		public var items:Array;		public var childItems:Array;		static public var ANIMATION_SPEED:Number = .5;		static public var HALF_ANIMATION_SPEED:Number = ANIMATION_SPEED/2;		public var timer:Timer;		public var selectedNode:FilmSpinNode;		public var previousSelectedNode:FilmSpinNode;		public var filmResultsMax:Number = 20;		public var selectedNodeHighlight:RoundRect;		public var newNodeHighlight:RoundRect;		public var selectedNodeLine:Sprite;			/**		 * Creates a new Movies component instance.		 * com.metaweb.samples.filmspin.FilmSpin		 */		public function FilmSpin() { 			// get flash vars			Environment.getFlashVars(this.root);			Environment.setValue("baseURL","http://www.freebase.com/")			var baseURL:String = Environment.getValue("baseURL");			if(baseURL != null) {				DataManager.BASE_URL = baseURL;							} else {				Environment.setValue("baseURL","http://www.freebase.com/")			}			trace('DataManager.BASE_URL = ' + DataManager.BASE_URL);						items = [];			childItems = [];						addEventListener("keyUp", onKeyUp, false, 0, true);			search.search_btn.addEventListener("click", onClickSearch, false, 0, true);			search.search_txt.addEventListener("click", onClickSearchText, false, 0, true);						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						stage.addEventListener("resize", onResize, false, 0, true);			setSize(stage.stageWidth,stage.stageHeight)						selectedNodeHighlight.alpha = 0;			newNodeHighlight.alpha = 0;						SWFAddress.onChange = handleSWFAddress;								}		private function handleSWFAddress():void {      var value:String = SWFAddress.getValue();			//ExternalInterface.call("alert","value = " + value)			//value = "/id=%239202a8c04000641f8000000000593392"			//value = "id=/topic/en/judd_nelson"			if(value.length > 0 ) {				var idReg:RegExp = /id=(.+)/;				var id:String = value.replace(idReg,'$1')				getIDQuery(id)			} else {				search.search_txt.text = "kubrick"				submitSearch();			}			    }				public function getIDQuery(p_id:String):void{			trace("getIDQuery = " + p_id);			var query:String = '{ "actors":{ "query":[{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "guid":null, "id":"' + p_id + '", "limit":5, "name":null, "sort":"name", "type":"/film/actor" }] }, "directors":{ "query":[{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "guid":null, "id":"' + p_id + '", "limit":5, "name":null, "sort":"name", "type":"/film/director" }] }, "films":{ "query":[{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "guid":null, "id":"' + p_id + '", "initial_release_date":null, "limit":5, "name":null, "runtime":[{ "runtime":null }], "sort":"name", "type":"/film/film" }] } }}'						var loader:URLLoader = DataManager.getQueries(JSON.decode(query),onGetSearchQuery);			loader.addEventListener(IOErrorEvent.IO_ERROR, onGetSearchQueryError)		}		private function onGetIDQuery(p_event:Event):void{			var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);						setSearchResults(result)		}		private function onResize(p_event:Event):void{			setSize(stage.stageWidth,stage.stageHeight)		}		public function setSize(w:Number,h:Number):void{			w = Math.max(w,800);			h = Math.max(h,600);			bg.width = w;			bg.height = h;			search.y = h - search.height - 10;			search.bg.width = w - search.x*2;			search.help_txt.x = w - 70;			logo.x = w - logo.width - 14;			logo.y = search.y - logo.height - 8;		}		private function onClickSearchText(p_event:Event):void{			search.search_txt.setSelection(0,search.search_txt.length)		}		private function onClickSearch(p_event:Event):void{			submitSearch();		}		private function onKeyUp(p_event:KeyboardEvent):void{			var charCode:Number = p_event.charCode;			if(charCode == 13) {				submitSearch();			}		}		public function submitSearch():void{			if(search.search_txt.text.length > 0) {				getSearchQuery(search.search_txt.text)			}		}		public function getSearchQuery(p_search:String):void{			var limit:Number = 5;			var query:String = '{ "actors":{ "query":[{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "guid":null, "limit":5, "name":null, "name~=":"*' + p_search + '*", "sort":"name", "type":"/film/actor" }] }, "directors":{ "query":[{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "guid":null, "limit":5, "name":null, "name~=":"*' + p_search + '*", "sort":"name", "type":"/film/director" }] }, "films":{ "query":[{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "guid":null, "initial_release_date":null, "limit":5, "name":null, "name~=":"*' + p_search + '*", "runtime":[{ "runtime":null }], "sort":"name", "type":"/film/film" }] } }'						showProgress(true)			setMessage("")			var loader:URLLoader = DataManager.getQueries(JSON.decode(query),onGetSearchQuery)			loader.addEventListener(IOErrorEvent.IO_ERROR, onGetSearchQueryError)		}		private function onGetSearchQueryError(p_event:Event):void{			trace("onGetSearchQueryError = " + onGetSearchQueryError);			showProgress(false);			setMessage("Server not available. You might need to login to " + Environment.getValue("baseURL") + " first.")		}				private function onGetSearchQuery(p_event:Event):void{			showProgress(false)						var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);			trace(JSON.log(result))			setSearchResults(result)		}		public function addSearchResults(sourceItems:Array,startY:Number):void{			var length:uint = sourceItems.length;			var stageMargin:Number = 25;			for(var i:uint = 0;i < length;i++) {				var dataModel:Object = sourceItems[i];				var node:FilmSpinNode = new FilmSpinNode();				addChild(node);				node.dataModel = dataModel;				var itemWidth:Number = node.width + stageMargin;				var newX:Number = stageMargin + itemWidth*i;				node.x = newX + itemWidth;				node.y = startY;				node.alpha = 0;								node.enableMetaData(false);								node.addEventListener("itemClick", onSelectSearchResult, false, 0, true);				node.addEventListener("itemClickMetaData", onSelectNodeMetaData, false, 0, true);								addOverStates(node);								items.push(node)								var delay:Number = i*.05				Tweener.addTween(node, { x:newX, y:startY, time:ANIMATION_SPEED, transition:"easeInOutBack",delay:delay});				Tweener.addTween(node, { alpha:1, time:ANIMATION_SPEED, transition:"linear",delay:delay});											}		}		public function setSearchResults(result:Object):void{						//remove all previous nodes			var length:uint = items.length;			for(var i:uint = 0; i < length; i++) {				removeChild(items[i]);			}			items = [];						if(selectedNode != null  && contains(selectedNode)) removeChild(selectedNode);			if(previousSelectedNode != null && contains(previousSelectedNode)) removeChild(previousSelectedNode);						removeChildNodes();									addSearchResults(result.films.result,25)						addSearchResults(result.actors.result,300)									addSearchResults(result.directors.result,500)			if(items.length == 1) {				focusNode(items[0])			}		}				public function removeChildNodes():void{						var i:uint = childItems.length;						while(i--) {				var node:FilmSpinNode = childItems[i];				if(node != selectedNode) {					removeChild(childItems[i]);				}			}			childItems = [];		}		public function addOverStates(node:FilmSpinNode):void{			node.addEventListener(MouseEvent.ROLL_OVER, onOverNode, false, 0, true);			node.addEventListener(MouseEvent.ROLL_OUT, onOutNode, false, 0, true);		}		public function removeOverStates(node:FilmSpinNode):void{			node.removeEventListener(MouseEvent.ROLL_OVER, onOverNode);			node.removeEventListener(MouseEvent.ROLL_OUT, onOutNode);		}		private function onOverNode(p_event:Event):void{			var node:FilmSpinNode = p_event.currentTarget as FilmSpinNode;			node.bringToFront();			if(selectedNode != null) {				selectedNode.showMetaData(false)			}			/*			newNodeHighlight.width = node.width			newNodeHighlight.height = node.height;			newNodeHighlight.x = node.x			newNodeHighlight.y = node.y						var margin:Number = 8;			Tweener.addTween(newNodeHighlight, {	width:node.width + margin*2, 													height:node.height + margin*2,													x:node.x - margin,													y:node.y - margin,													alpha:.8,													time:ANIMATION_SPEED,													transition:"easeOutExpo"});						if(selectedNode != null) {				selectedNodeHighlight.width = selectedNode.width				selectedNodeHighlight.height = selectedNode.height;				selectedNodeHighlight.x = selectedNode.x				selectedNodeHighlight.y = selectedNode.y								Tweener.addTween(selectedNodeHighlight, {	width:selectedNode.width + margin*2, 															height:selectedNode.height + margin*2,															x:selectedNode.x - margin,															y:selectedNode.y - margin,															alpha:.8,															time:ANIMATION_SPEED,															transition:"easeOutExpo"});								selectedNodeLine.x = selectedNode.x + selectedNode.width/2;				selectedNodeLine.y = selectedNode.y + selectedNode.height/2;								selectedNodeLine.scaleX = .001;				selectedNodeLine.scaleY = .001;								var newScaleX:Number = ((node.x+node.width/2) - selectedNodeLine.x)/100;				var newScaleY:Number = ((node.y+node.height/2) - selectedNodeLine.y)/100;				if(newScaleX == 0) {					newScaleX = .001				}				if(newScaleY == 0) {					newScaleY = .001				}								//selectedNodeLine.scaleX = newScaleX;				//selectedNodeLine.scaleY = newScaleY;				Tweener.addTween(selectedNodeLine, { 	scaleX:newScaleX,														scaleY:newScaleY,														time:ANIMATION_SPEED*2, transition:"easeOutExpo"});																		Tweener.addTween(selectedNodeLine, { alpha:.8, time:ANIMATION_SPEED, transition:"easeOutExpo"});							}*/		}		private function onOutNode(p_event:Event):void{			var node:FilmSpinNode = p_event.currentTarget as FilmSpinNode;			node.showMetaData(false);						/*Tweener.addTween(newNodeHighlight, {	width:node.width, 																height:node.height,																x:node.x,																y:node.y,																alpha:0,																time:ANIMATION_SPEED,																transition:"easeOutExpo"});						if(selectedNode != null) {							Tweener.addTween(selectedNodeHighlight, {	width:selectedNode.width, 																	height:selectedNode.height,																	x:selectedNode.x,																	y:selectedNode.y,																	alpha:0,																	time:ANIMATION_SPEED,																	transition:"easeOutExpo"});														Tweener.addTween(selectedNodeLine, { alpha:0, time:ANIMATION_SPEED, transition:"easeOutExpo"});						}*/		}		private function onSelectSearchResult(p_event:Event):void{			var clickedNode:FilmSpinNode = p_event.currentTarget as FilmSpinNode;			clickedNode.selected = true;						var otherItems = items.slice(0)			var i:uint = otherItems.length;			while(i--) {				if(items[i] == clickedNode) break;			}						otherItems.splice(i,1);			i = otherItems.length;			while(i--) {				var node:FilmSpinNode =otherItems[i];				var delay:Number = i*.03				Tweener.addTween(node, { y:stage.stageHeight + 25, time:ANIMATION_SPEED, transition:"easeInOutBack",delay:delay});				Tweener.addTween(node, { alpha:0, time:ANIMATION_SPEED, transition:"linear",delay:delay});			}						focusNode(clickedNode)		}		public function focusNode(p_node:FilmSpinNode):void{			if(p_node == selectedNode) return;			setMessage("")			p_node.showMetaData(false);			p_node.enableMetaData(true);						removeOverStates(p_node)			Tweener.addTween(newNodeHighlight, { alpha:0, time:HALF_ANIMATION_SPEED, transition:"linear"});			// calc new centerX			var centerX:Number = Math.round(stage.stageWidth/2) - p_node.width/2			var centerY:Number = Math.round(stage.stageHeight/2) - p_node.height/2;												// calc distance from center			var deltaX:Number =  centerX - p_node.x			var deltaY:Number =  centerY - p_node.y						// remove old nodes except node clicked			var delay:Number = 0;			for ( var i:uint = 0; i < childItems.length; i++ ) {				var node:FilmSpinNode = childItems[i];				if(node != p_node) {					delay = i*.03					Tweener.addTween(node, { x:node.x + deltaX, y:node.y + deltaY, time:ANIMATION_SPEED, transition:"easeInOutBack",delay:delay});					Tweener.addTween(node, { alpha:0, time:ANIMATION_SPEED, transition:"linear",delay:delay})				}			}						// move new selection to center			Tweener.addTween(p_node, { x:centerX, y:centerY, time:ANIMATION_SPEED, transition:"easeInOutBack"});									Tweener.addTween(selectedNode, { alpha:0, time:ANIMATION_SPEED, transition:"linear",delay:delay})			/*			// move old selection to center offset by new node location			previousSelectedNode = selectedNode;			if(previousSelectedNode != null) {				// store reversed angle in previous node				previousSelectedNode.angle = p_node.angle - 180;								Tweener.addTween(previousSelectedNode, { 	x:previousSelectedNode.x + deltaX,															y:previousSelectedNode.y + deltaY,															time:ANIMATION_SPEED,															transition:"easeInOutBack"});			}*/									selectedNode = p_node;			selectedNode.bringToFront();									if(timer != null) timer.stop();			timer = new Timer((ANIMATION_SPEED+delay)*1000,1);			timer.addEventListener("timerComplete", onFocusNode, false, 0, true);			timer.start();					}		private function onFocusNode(p_event:Event):void{			if(selectedNode.dataModel.type == "/film/film") {				getMovieQuery(selectedNode.dataModel.guid)			} else if ( selectedNode.dataModel.type == "/film/actor") {				getActorQuery(selectedNode.dataModel.guid)			} else if ( selectedNode.dataModel.type == "/film/director") {				getDirectorQuery(selectedNode.dataModel.guid)			}		}		public function getMovieQuery(guid:String):void{			trace("getMovieQuery = " + guid);			var query:String = '{ "query":[{ "/common/topic/article":[{}], "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "directed_by":[{ "/common/topic/image":[{ "guid":null, "optional":true }], "/people/person/date_of_birth":[{}], "/people/person/nationality":[{}], "guid":null, "name":null, "sort":"name", "type":"/film/director", "/common/topic/article":[{}] }], "guid":"' + guid + '", "initial_release_date":null, "name":null, "runtime":[{ "runtime":null }], "starring":[{ "actor":{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "/people/person/date_of_birth":[{}], "/people/person/nationality":[{}], "guid":null, "name":null, "sort":"name", "type":"/film/actor", "/common/topic/article":[{}]}, "part":null }], "type":"/film/film" }] } '						showProgress(true)			trace('query = ' + query);			DataManager.getQuery(JSON.decode(query),onGetMovieQuery)					}		private function onGetMovieQuery(p_event:Event):void{			showProgress(false)			var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);						if(result.result.query.length == 0) {				setMessage("No Results Found")				return;			}			drawNodesForMovie(result.result.query[0])		}				public function getActorQuery(guid:String):void{			trace("getActorQuery = " + guid);			var query:String = '{ "query":[{ "/common/topic/article":[{}],"/people/person/date_of_birth":[{}], "/people/person/nationality":[{}], "/common/topic/image":[{ "guid":null, "optional":true }], "film":[{ "film":{ "/common/topic/article":[{}], "/common/topic/image":[{ "guid":null, "optional":true }], "guid":null, "initial_release_date":null, "name":null,"runtime":[{ "runtime":null }], "type":"/film/film","sort":"name" } }], "guid":"'+guid+'", "limit":10, "name":null, "type":"/film/actor" }] }';						showProgress(true)			DataManager.getQuery(JSON.decode(query),onGetActorQuery)		}		private function onGetActorQuery(p_event:Event):void{			log("onGetActorQuery");			showProgress(false)			var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);			if(result.result.query.length == 0) {				setMessage("No Results Found")				return;			}			drawNodesForActor(result.result.query[0])		}		public function getDirectorQuery(guid:String):void{			trace("getDirectorQuery = " + guid);			var query:String = '{ "query":[{ "/common/topic/article":[{}], "/common/topic/image":[{ "guid":null, "optional":true }], "/people/person/date_of_birth":[{}], "/people/person/nationality":[{}], "film":[{ "/common/topic/article":[{}], "/common/topic/image":[{ "guid":null, "optional":true }], "guid":null, "initial_release_date":null, "name":null, "runtime":[{ "runtime":null }], "sort":"name", "type":"/film/film" }], "guid":"' + guid + '", "limit":10, "name":null, "type":"/film/director" }] }';						showProgress(true)			DataManager.getQuery(JSON.decode(query),onGetDirectorQuery)		}		private function onGetDirectorQuery(p_event:Event):void{			log("onGetDirectorQuery");			showProgress(false)			var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);			if(result.result.query.length == 0) {				setMessage("No Results Found")				return;			}			drawNodesForDirector(result.result.query[0])		}		public function drawNodesForDirector(director:Object):void{			removeChildNodes();			selectedNode.dataModel = director;			var length:uint = director.film.length;			length = Math.min(length,filmResultsMax);			for(var i:uint = 0;i < length;i++) {				var dataModel:Object = director.film[i]				var node:FilmSpinNode = new FilmSpinNode();				addChild(node);				node.dataModel = dataModel;				childItems.push(node)			}			drawChildItems();		}				public function drawNodesForActor(actor:Object):void{			//trace(JSON.log(actor));			removeChildNodes();			selectedNode.dataModel = actor;			var length:uint = actor.film.length;			length = Math.min(length,filmResultsMax);			for(var i:uint = 0;i < length;i++) {				var dataModel:Object = actor.film[i].film				var node:FilmSpinNode = new FilmSpinNode();				addChild(node);				node.dataModel = dataModel;								childItems.push(node)			}			drawChildItems();		}		private function onSelectNode(p_event:Event):void{			var clickedNode:FilmSpinNode = p_event.currentTarget as FilmSpinNode;			clickedNode.selected = true;						focusNode(clickedNode)		}				public function drawNodesForMovie(movie:Object):void{			//trace("drawNodesForMovie = " + movie);			//trace(JSON.log(movie))			selectedNode.dataModel = movie;			removeChildNodes();						var length:uint = movie.starring.length;						for(var i:uint = 0;i < length;i++) {				var dataModel:Object = movie.starring[i].actor;				var node:FilmSpinNode = new FilmSpinNode();				addChild(node);				node.dataModel = dataModel;								childItems.push(node)			}			length = movie.directed_by.length			for(i = 0;i < length;i++) {				dataModel = movie.directed_by[i];				node = new FilmSpinNode();				addChild(node);				node.dataModel = dataModel;												childItems.push(node)			}						drawChildItems();				}		public function drawChildItems():void{						var startAngle:Number = 0;			var centerX:Number = Math.round(stage.stageWidth/2);			var centerY:Number = Math.round(stage.stageHeight/2);			var diameterH = centerX - stage.stageWidth * .12;			var diameterV = centerY - stage.stageHeight * .20;						var length:uint = childItems.length;			for(var i:uint  = 0; i < length;i++) {								var node:FilmSpinNode = childItems[i];				var halfWidth:Number = node.width/2;				var halfHeight:Number = node.height/2				var point:Object = pointsOnEllipse({_x:centerX - halfWidth, _y:centerY - halfHeight},{_x:diameterH,_y:diameterV},length,i,startAngle);				node.x = centerX - halfWidth				node.y = centerY - halfHeight				node.alpha = 0;				node.angle = point._angle;								node.addEventListener("itemClick", onSelectNode, false, 0, true);				node.addEventListener("itemClickMetaData", onSelectNodeMetaData, false, 0, true);				addOverStates(node)								node.bringToFront();								//node.visible = false				var delay:Number = i*.08;								Tweener.addTween(node, { x:point._x ,y:point._y, time:ANIMATION_SPEED, transition:"easeInOutBack",delay:delay});				Tweener.addTween(node, { alpha:1, time:ANIMATION_SPEED, transition:"linear",delay:delay});			}						selectedNode.bringToFront();		}				function pointsOnEllipse ( center, diameter, total, c ,nStartAngle):Object		{			var step = 360 / total;			var nAngle = c*step + nStartAngle;			var nRadians = toRadians(nAngle)			var x    = Math.sin( nRadians ) * diameter._x + center._x;			var y    = -Math.cos( nRadians ) * diameter._y + center._y;			var rot  = 180 - (c * step);			return { _x: x, _y: y, _rotation: rot, _angle:nAngle };		}		function toRadians  (theta):Number {			return theta * Math.PI / 180;		}		function toDegrees  (theta):Number {			return theta * 180 / Math.PI;		}				public function log(s:*):void{					}		public function showProgress(p_show:Boolean):void{			if(p_show) {				logo.spinner.loop = true;				logo.spinner.gotoAndPlay("on")			} else {				logo.spinner.loop = false			}		}		public function setMessage(s:String):void{			search.message_txt.text = s;		}		private function onSelectNodeMetaData(p_event:Event):void{			var node:FilmSpinNode = p_event.currentTarget as FilmSpinNode;			node.bringToFront();			//trace(JSON.log(node.dataModel))		}	}}