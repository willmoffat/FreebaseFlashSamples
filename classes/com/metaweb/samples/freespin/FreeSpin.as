////  FreeSpin//  Created by Ketan Anjaria on 2007-06-19.//  Copyright (c) 2007 kidBombay. All rights reserved.//package com.metaweb.samples.freespin {	import flash.display.*		import flash.text.*;	import flash.events.*;	import flash.net.*;	import flash.utils.*;	import flash.filters.*;	import flash.external.*;		import com.metaweb.*;	import com.adobe.serialization.json.*;	import caurina.transitions.*;		import metaliq.core.*;	import com.kidbombay.shapes.*;	import com.kidbombay.util.*;	import com.kidbombay.effects.*;		import com.metaweb.samples.freespin.*;	import com.metaweb.query.*;		public class FreeSpin extends MovieClip {		static public var ANIMATION_SPEED:Number = .5;		static public var LINE_COLORS:Array = [0x559EBD,0x84BD55,0xD98B54,0xFF6371,0x755AD4,0xB655BD,0x977B60]		static private var $instance:FreeSpin;		static private var $typeLinkConnections = {}				public var bg:Sprite;		public var search:MovieClip;		public var logo:MovieClip;		public var itemHolder:Sprite;		public var nodeHolder:Sprite;		public var linkHolder:Sprite;				private var $searchTerm:String;		private var $nodes:Array;		private var $nodesByID:Object;		private var $timer:Timer;		private var $propertyQueryLabelColors:Object;		private var $labelColorIndex:Number=0;				private var $baseNode:FreeSpinNode;		private var $selectedNode:FreeSpinNode;		private var $nodeLinks:Array;		private var $nodeLinkTypes:Object;		private var $nodeLinkTypeCount:Number=0;								private var $pivotQuery:PivotQuery;				/**		 * Creates a new FreeSpin component instance.		 * com.metaweb.samples.freespin.FreeSpin		 */		static public function getInstance():FreeSpin {			return $instance;		}		public function FreeSpin() { 			$instance = this			// get flash vars			Environment.getFlashVars(this.root);						// baseURL			var baseURL:String = Environment.getValue("baseURL");			if(baseURL != null) {				DataManager.BASE_URL = baseURL;			} else {				Environment.setValue("baseURL","http://sandbox.freebase.com/")				DataManager.BASE_URL = Environment.getValue("baseURL");			}			// resize			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						stage.addEventListener("resize", onResize, false, 0, true);			setSize(stage.stageWidth,stage.stageHeight);						$nodes = [];			$nodeLinks = [];			$propertyQueryLabelColors = {};			clearScreen();			itemHolder = new Sprite();			addChild(itemHolder)			linkHolder = new Sprite();			itemHolder.addChild(linkHolder);			nodeHolder = new Sprite();			itemHolder.addChild(nodeHolder)						logo.addEventListener("click", onClickLogo, false, 0, true);						// init search			search.autoCompleteView.inputField = search.search_txt;			// when the auto complete is executed for an item			search.autoCompleteView.addEventListener("autoComplete", onAutoCompleteSearch, false, 0, true);			// when the user hits the return key			search.autoCompleteView.addEventListener("submit", onAutoCompleteSubmit, false, 0, true);						search.search_btn.addEventListener("click", onClickSearch, false, 0, true);			search.search_txt.addEventListener("click", onClickSearchText, false, 0, true);						search.credit_btn.addEventListener("click", onClickCredit, false, 0, true);									search.dropDown.visible = false;						$searchTerm = "Metaweb Technologies, Inc."			search.search_txt.text = $searchTerm;						// bring search to front			swapChildren(itemHolder,search)						initQueries();						$propertyQueryLabelColors = {				"employs":0x559EE5,				"used to employ":0x559EE5,				"works at":0x559EE5,				"worked at":0x559EE5,				"has board member":0xFF6371,				"had board member":0xFF6371,				"on the board of":0xFF6371,				"was on the board of":0xFF6371,				"founded":0x755AD4,				"founded by":0x755AD4,				"acquired":0xB655BD,				"acquired by":0xB655BD,				"invested in":0x84BD55,				"received investment from":0x84BD55			};							SWFAddress.onChange = handleSWFAddress;				}						public static function getTypeLinkConnections():Object {			return $typeLinkConnections		}						public function initQueries():void{						$typeLinkConnections = {};						// Person founded Company			// Person is a board member of Company			// Person was a board member of Company			// Person works at Company			// Person worked at Company						var person:Object = {};			person["founded"] = {type:"/business/company",link:"/business/company_founder/companies_founded"}			person["on the board of"] = {type:"/business/company",link:"/business/board_membership",rootProperty:'member',property:'company'}			person["works at"] = {type:"/business/company",link:"/business/employment_tenure",rootProperty:'person',property:'company'}						$typeLinkConnections["/people/person"] = person						var company:Object = {};			company["acquired"] = {type:"/business/company",link:"/business/company/subsidiary_companies"}			company["acquired by"] = {type:"/business/company",link:"/business/company/parent_company"}			company["founded by"] = {type:"/people/person",link:"/business/company/founders"}			company["employs"] = {type:"/people/person",link:"/business/employment_tenure",rootProperty:'company',property:'person'}			company["has board member"] = {type:"/people/person",link:"/business/board_membership",rootProperty:'company',property:'member'}						company["received investment from"] = {type:"/business/company",link:"/venture_capital/venture_investment",rootProperty:'company',property:'investor'}			company["invested in"] = {type:"/business/company",link:"/venture_capital/venture_investment",rootProperty:'investor',property:'company'}						$typeLinkConnections["/business/company"] = company						// Company acquired Company			// Company acquired by Company			// Company founded by Person			// Company employs Person			// Company used to employ Person			// Company has board member Person			// Company had board member Person			$pivotQuery = new PivotQuery();			$pivotQuery.addEventListener("search", onGetPivotQuery, false, 0, true);						$pivotQuery.addPropertyQuery(	"founded",																		"Company",																		["/people/person"],																		"/business/company_founder/companies_founded")																					$pivotQuery.addPropertyQuery(	"founded by",																		"Person",																		["/business/company"],																		"/business/company/founders")						$pivotQuery.addPropertyQuery(	"acquired",																		"Company",																		["/business/company"],																		"/business/company/subsidiary_companies")						$pivotQuery.addPropertyQuery(	"acquired by",																		"Company",																		["/business/company"],																		"/business/company/parent_company")									$pivotQuery.addPropertyQuery(	"employs",																		"Person",																		["/business/company"],																		"/business/employer/employees",																		'{"target:person":[{}]}',																		'{"to":{"optional":"forbidden","value":null},"title":null}')																					$pivotQuery.addPropertyQuery(	"used to employ",																		"Person",																		["/business/company"],																		"/business/employer/employees",																		'{"target:person":[{}]}',																		'{"to":{"optional":"required","value":null},"title":null}')						$pivotQuery.addPropertyQuery(	"on the board of",																		"Company",																		["/people/person"],																		"/business/board_member/board_memberships",																		'{"target:company":[{}]}',																		'{"to":{"optional":"forbidden","value":null},"title":null}')			$pivotQuery.addPropertyQuery(	"was on the board of",																		"Person",																		["/people/person"],																		"/business/board_member/board_memberships",																		'{"target:company":[{}]}',																		'{"to":{"optional":"required","value":null},"title":null}')								$pivotQuery.addPropertyQuery(	"has board member",																		"Person",																		["/business/company"],																		"/business/company/board_members",																		'{"target:member":[{}]}',																		'{"to":{"optional":"forbidden","value":null},"title":null}')			$pivotQuery.addPropertyQuery(	"had board member",																		"Person",																		["/business/company"],																		"/business/company/board_members",																		'{"target:member":[{}]}',																		'{"to":{"optional":"required","value":null},"title":null}')																																																																	$pivotQuery.addPropertyQuery(	"works at",																		"Company",																		["/people/person"],																		"/people/person/employment_history",																		'{"target:company":[{}]}',																		'{"to":{"optional":"forbidden","value":null},"title":null}')																																							$pivotQuery.addPropertyQuery(	"worked at",																		"Company",																		["/people/person"],																		"/people/person/employment_history",																		'{"target:company":[{}]}',																		'{"to":{"optional":"required","value":null},"title":null}')			$pivotQuery.addPropertyQuery(	"invested in",																		"Company",																		["/business/company","/people/person"],																		"/venture_capital/venture_investor/investments",																		'{"target:company":[{}]}',																		'{"investment_round":null}')						$pivotQuery.addPropertyQuery(	"received investment from",																		"Venture Investor",																		["/business/company"],																		"/venture_capital/venture_funded_company/venture_investors",																		'{"target:investor":[{}]}',																		'{"investment_round":null}')					}				private var $itemClicked:Boolean = false;		private function handleSWFAddress():void {			if($itemClicked) {				$itemClicked = false;				return			}						clearScreen();							      var value:String = SWFAddress.getValue();			//value = '#id=/topic/en/metaweb'			//value = '#id=/topic/en/thinking_machines'			//trace("value = " + value);			if(value.length > 0 ) {				var id:String = value.substring(3)								executeIDQuery(id);			} else {				// this gets called if no value is in place				// the first search to do				executeNameQuery($searchTerm);			}    }		private function onAutoCompleteSubmit (p_event:Event):void{			submitSearch();		}						public function submitSearch():void{			if(search.search_txt.text.length > 0) {								clearScreen()								// change the search term to be the search text								$searchTerm = search.search_txt.text;				// run the query				executeNameQuery($searchTerm);			}		}				public function executeNameQuery(p_searchTerm:String):void{				$pivotQuery.searchByName(p_searchTerm);						showProgress(true);		}				public function executeIDQuery(p_id:String):void{			$pivotQuery.searchByID(p_id);						showProgress(true);		}				private function onGetPivotQuery(p_event:Event):void{						if($pivotQuery.result.success) {				setPivotQueryResult($pivotQuery.result)			}			showProgress(false)		}		private function onGetPivotQueryError(p_event:Event):void{			showProgress(false);			setMessage("Server not available. You might need to login to " + Environment.getValue("baseURL") + " first.")		}				public function setPivotQueryResult(p_pivotQueryResult:PivotQueryResult):void{										if($selectedNode == null) {								$baseNode = addNode(p_pivotQueryResult.rootItem)				$baseNode.alpha = 0;				} else {				$baseNode = $selectedNode;			}						var id:String = $baseNode.dataModel.id;						$itemClicked = true;			SWFAddress.setValue("id="+id)						// only focus on click						if($selectedNode == $baseNode) {				focusNode($baseNode)			}		}		public function onLoadNode(p_node:FreeSpinNode):void{			// called by every node when image loaded or no image			if(p_node != $baseNode) return;						// focus node on load of assets			var centerX:Number = Math.round(stage.stageWidth/2) //- $baseNode.width/2;			$baseNode.x = centerX;			$baseNode.y = Math.round(stage.stageHeight/2) //- $baseNode.height/2;			Tweener.addTween($baseNode, { alpha:1, time:ANIMATION_SPEED,transition:"linear" });			focusNode($baseNode)		}				public function focusNode(p_node:FreeSpinNode):void{			/*trace("focusNode = " + p_node.label);*/			/*if(p_node == $selectedNode) return;*/			setMessage("")			p_node.isFocused = true;			// calc new centerX			var centerX:Number = Math.round(stage.stageWidth/2)  //- p_node.width/2			var centerY:Number = Math.round(stage.stageHeight/2) + 20 //- p_node.height/2;						// calc distance from center			var deltaX:Number =  centerX - p_node.x			var deltaY:Number =  centerY - p_node.y						// remove old nodes except node clicked			var delay:Number = 0;			var i:uint = $nodes.length;			while(i--) {				var node:FreeSpinNode = $nodes[i];				if(node != p_node) {					$nodes.splice(i,1)					delete $nodesByID[node.dataModel.id];										delay = i*.03					Tweener.addTween(node, { x:node.x + deltaX, y:node.y + deltaY, time:ANIMATION_SPEED, transition:"easeInOutBack",delay:delay});					Tweener.addTween(node, { alpha:0, time:ANIMATION_SPEED, transition:"linear",delay:delay, onComplete:function() {this.parent.removeChild(this)} });				}			}			removeLinks();						// move new selection to center			Tweener.addTween(p_node, { x:centerX, y:centerY, time:ANIMATION_SPEED, transition:"easeInOutBack"});			Tweener.addTween(p_node, { scaleX:1.6, scaleY:1.6,time:ANIMATION_SPEED/2,transition:"easeInOutCubic" });			Tweener.addTween(p_node, { scaleX:1, scaleY:1,time:ANIMATION_SPEED/2,transition:"easeInOutCubic",delay:ANIMATION_SPEED/2 });						// animate node to large size			p_node.animateToLarge();						$selectedNode = p_node;			$selectedNode.bringToFront();								if($timer != null) $timer.stop();			$timer = new Timer((ANIMATION_SPEED+delay)*1000,1);			$timer.addEventListener("timerComplete", onFocusNode, false, 0, true);			$timer.start();					}				private function onFocusNode(p_event:Event):void{			drawChildNodes();		}				public function removeLinks():void{			var i:uint = $nodeLinks.length;			while(i--) {				var delay:Number = i*.03				var freeSpinLink:FreeSpinLink = $nodeLinks[i];				Tweener.addTween(freeSpinLink, { alpha:0, time:ANIMATION_SPEED/2, transition:"linear",delay:delay, onComplete:function() {this.parent.removeChild(this)} });							}						$nodeLinks = [];								}		public function addNodeLinkType(p_type:String):Number{			/*trace("addNodeLinkType = " + p_type);*/			if($nodeLinkTypes[p_type] != null ) {				return $nodeLinkTypes[p_type];			}						var colorIndex:uint = $nodeLinkTypeCount % LINE_COLORS.length;			var color:Number = LINE_COLORS[colorIndex]									$nodeLinkTypes[p_type] = color;			$nodeLinkTypeCount++;			return color;		}		public function addLink(originNode:FreeSpinNode,targetNode:FreeSpinNode):FreeSpinLink{			var link:FreeSpinLink = new FreeSpinLink();									link.originNode = originNode;			link.targetNode = targetNode;			linkHolder.addChild(link);			targetNode.link = link;			$nodeLinks.push(link);						var label:String = targetNode.dataModel.propertyQuery.label			var color:Number = getColorForPropertyQueryLabel(label)			link.addLabel(label,color)						return link;		}				public function getColorForPropertyQueryLabel(label:String):Number{			return $propertyQueryLabelColors[label]		}								public function drawChildNodes():void{				var node:FreeSpinNode;			var delay:Number = 0;						// new array of child nodes(don't overwrite old ones because they are still animating out)			var childNodes:Array = [];			var items:Array = $pivotQuery.result.items;			var length:int = items.length;						for (var i:int = 0; i<length; i++){				var propertyQueryResult:PropertyQueryResult = items[i] as PropertyQueryResult;				buildNode(propertyQueryResult,childNodes)			}									var startAngle:Number = 0;			var centerX:Number = Math.round(stage.stageWidth/2);			var centerY:Number = Math.round(stage.stageHeight/2)+20;			var diameterH = centerX - stage.stageWidth * .12;			var diameterV = centerY - stage.stageHeight * .095;						length = childNodes.length;						//length = Math.min(length,30)						for(i  = 0; i < length;i++) {								node = childNodes[i];								var point:Object = pointsOnEllipse({x:centerX , y:centerY },{x:diameterH,y:diameterV},length,i,startAngle);				node.x = centerX //- halfWidth				node.y = centerY //- halfHeight								node.alpha = 0;								node.addEventListener("itemClick", onClickNode, false, 0, true);											node.bringToFront();								delay = i*.08;								Tweener.addTween(node, { x:point.x ,y:point.y, time:ANIMATION_SPEED, transition:"easeInOutBack",delay:delay});				Tweener.addTween(node, { alpha:1, time:ANIMATION_SPEED, transition:"linear",delay:delay});				}						$selectedNode.bringToFront();												if($timer != null) $timer.stop();			$timer = new Timer((ANIMATION_SPEED+delay)*1000,1);			$timer.addEventListener("timerComplete", onDrawChildNodes, false, 0, true);			$timer.start();					}				public function buildNode(p_propertyQueryResult:PropertyQueryResult,childNodes:Array):void{			var node:FreeSpinNode = nodeExists(p_propertyQueryResult)			var link:FreeSpinLink					if(node == null) {				node = addNode(p_propertyQueryResult);				childNodes.push(node)				// add link from selectedNode to new link				link = addLink($selectedNode,node);				link.visible = false;			} else {				link = node.link				var label:String = p_propertyQueryResult.propertyQuery.label				link.addLabel(label,getColorForPropertyQueryLabel(label))			}		}				private function onDrawChildNodes(p_event:Event):void{			drawLinks();		}				public function drawLinks():void{						var i:int = $nodeLinks.length;			while(i--) {				var link:FreeSpinLink = $nodeLinks[i];								link.x = link.originNode.x;				link.y = link.originNode.y;				var targetX:Number = link.targetNode.x - link.x;				var targetY:Number = link.targetNode.y - link.y				link.drawLine(targetX,targetY)				link.alpha = 0;				link.visible = true;				var delay:Number = i*.02; 				Tweener.addTween(link, { alpha:1, time:ANIMATION_SPEED/2,transition:"linear",delay:delay });			}		}		public function addNode(p_dataModel:PropertyQueryResult):FreeSpinNode{			//trace("addNode = " + JSON.log(dataModel));						var id:String = p_dataModel.id						if($nodesByID[id] != null) return null;						//trace("addNode id = " + id);			var node:FreeSpinNode = new FreeSpinNode();			node.dataModel = p_dataModel;						nodeHolder.addChild(node);						$nodes.push(node)			$nodesByID[id] = node;						return node;					}				public function nodeExists(p_dataModel:PropertyQueryResult):FreeSpinNode{						var id:String = p_dataModel.id						if($nodesByID[id] != null) {				return $nodesByID[id] as FreeSpinNode;			}						return null		}				private function onClickNode(p_event:Event):void{			// this is the new selectedNode			$selectedNode = p_event.currentTarget as FreeSpinNode;			var id:String = $selectedNode.dataModel.id;						$itemClicked = true;									// run the query			executeIDQuery(id);				}				private function onAutoCompleteSearch (p_event:Event):void{						var dataModel:Object = search.autoCompleteView.selectedDataModel;			search.search_txt.htmlText = dataModel.name;						clearScreen();						executeIDQuery(dataModel.id);		}						public function setMessage(s:String):void{			search.message_txt.text = s;		}		public function showProgress(p_show:Boolean):void{			if(p_show) {				search.progressCircle.gotoAndPlay("on")			} else {				search.progressCircle.gotoAndStop("off")			}		}		private function onResize(p_event:Event):void{			setSize(stage.stageWidth,stage.stageHeight)		}		public function setSize(w:Number,h:Number):void{			w = Math.max(w,800);			h = Math.max(h,600);			bg.width = w;			bg.height = h;			search.bgMask.width = search.bg.width = w - search.x*2;			pinToRight(search.search_btn, search.bg.width, 28)			pinToRight(search.search_txt, search.bg.width, 236)			pinToRight(search.inputBG, search.bg.width, 245)			pinToRight(search.autoCompleteView, search.bg.width, 244)			pinToRight(search.progressCircle,search.bg.width,268)						pinToRight(logo,w,112)			pinToBottom(logo,h,36)			//logo.x = w - logo.width - 14;			//logo.y = search.y - logo.height - 8;		}		private function onClickSearchText(p_event:Event):void{			search.search_txt.setSelection(0,search.search_txt.length)		}		private function onClickSearch(p_event:Event):void{			submitSearch();		}		private function onClickLogo (p_event:Event):void{			var url:String = DataManager.BASE_URL;			var request:URLRequest = new URLRequest(url)			navigateToURL(request,"_self")		}		private function onClickCredit (p_event:Event):void{			var url:String = "http://www.kidbombay.com/";			var request:URLRequest = new URLRequest(url)			navigateToURL(request,"_blank")		}		public function pinToRight(target:DisplayObject,p_width:Number,p_offset:Number):void{			var delta:Number = p_width - target.x			target.x = p_width - p_offset;		}		public function pinToBottom(target:DisplayObject,p_height:Number,p_offset:Number):void{			var delta:Number = p_height - target.y			target.y = p_height - p_offset;		}		public function refresh():void{			var id:String = $selectedNode.dataModel.id;			clearScreen();			executeIDQuery(id)					}				public function clearScreen():void{			var i:uint = $nodes.length;			while(i--) {				var node:FreeSpinNode = $nodes[i];				node.parent.removeChild(node)			}			$nodes = [];			$nodesByID = {};			$selectedNode = null;			removeLinks();		}		public function pointsOnEllipse ( p_center:Object, diameter:Object, points:Number, pointIndex:Number ,p_startAngle:Number):Object {			var step:Number = 360 / points;			var angle:Number = pointIndex * step + p_startAngle;			var radians:Number = toRadians(angle)			var x:Number    = Math.sin( radians ) * diameter.x + p_center.x;			var y:Number    = -Math.cos( radians ) * diameter.y + p_center.y;			var rot:Number  = 180 - (pointIndex * step);			return { x: x, y: y, rotation: rot, angle:angle };		}		public function toRadians  (theta:Number):Number {			return theta * Math.PI / 180;		}		public function toDegrees  (theta:Number):Number {			return theta * 180 / Math.PI;		}			}}