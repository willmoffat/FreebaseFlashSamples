////  FreeSpinNode//  Created by Ketan Anjaria on 2007-06-19.//  Copyright (c) 2007 kidBombay. All rights reserved.//package com.metaweb.samples.freespin {	import flash.display.*		import flash.text.*;	import flash.events.*;	import flash.net.*;		import caurina.transitions.*;	import com.adobe.serialization.json.*;		import metaliq.core.*					import com.kidbombay.shapes.*;		import com.metaweb.samples.freespin.*;	import com.metaweb.*;	import com.metaweb.query.*;				public class FreeSpinNode extends Component {		public var bg:RoundRect;		public var imageHolder:MovieClip;		public var label_txt:TextField;		public var type_txt:TextField;		public var go_btn:FrameButton;		public var highlight:MovieClip;		public var addButtonHolder:MovieClip;		public var add_btn:FrameButton;		public var editViewHolder:MovieClip;		public var editView:EditView;		/**		 * Creates a new FreeSpinNode component instance.		 * com.metaweb.samples.freespin.FreeSpinNode		 */		public function FreeSpinNode() { 			super();		}				override protected function configUI() : void {			super.configUI();			mouseChildren = true;			highlight.visible = false;			highlight.alpha = 0;			highlight.rect.width = bg.width + 8;			highlight.rect.height = bg.height + 8;			hitRegion.addEventListener(MouseEvent.CLICK, onClick, false, 0, true);			addEventListener(MouseEvent.ROLL_OVER, onOver, false, 0, true);			addEventListener(MouseEvent.ROLL_OUT, onOut, false, 0, true);			}		override public function draw() : void {			super.draw();		}				private function onClick(p_event:Event):void{			dispatchItemClick()		}		public function dispatchItemClick():void{			highlight.visible = false;			if(link != null) link.showHighlight(false);			hitRegion.mouseEnabled = false;			if(go_btn != null) {				go_btn.visible = false;			}			if(add_btn != null ) {				addButtonHolder.removeChild(add_btn)			}			dispatchEvent(new Event("itemClick"))		}				public function onOver (p_event:Event):void{			go_btn = new btnArrowSmall();			go_btn.addEventListener("click", onClickGo, false, 0, true);			go_btn.alpha = 0;			go_btn.x = $isFocused ? 62 : bg.width/2 - go_btn.width - 5;			go_btn.y = $isFocused ? bg.height/2 - 18 : 2 ;			addChild(go_btn);			go_btn.bringToFront();			Tweener.addTween(go_btn, { _autoAlpha:1, time:FreeSpin.ANIMATION_SPEED/2,transition:"linear"});			bringToFront();			if($link != null) {				$link.bringToFront();			}						if (!$isFocused) {				Tweener.addTween(highlight, { _autoAlpha:1, time:FreeSpin.ANIMATION_SPEED/2,transition:"linear"});				if($link != null) link.showHighlight(true);			}			//animateToLarge();		}				public function onOut (p_event:Event):void{			if (!$isFocused ) {				Tweener.addTween(highlight, { _autoAlpha:0, time:FreeSpin.ANIMATION_SPEED/2,transition:"linear"});				if($link != null) link.showHighlight(false);			}			Tweener.addTween(go_btn, { _autoAlpha:0, time:FreeSpin.ANIMATION_SPEED/2,transition:"linear",onComplete:function() {this.parent.removeChild(this)}});			//animateToSmall();		}				private function onClickGo(p_event:Event):void{			var url:String = DataManager.getLink(dataModel.id)			var request:URLRequest = new URLRequest(url);			navigateToURL(request,"_blank")		}				public function animateToLarge():void{			var image:ExternalAsset = imageHolder.image;			var imageLarge:ExternalAsset = imageHolder.imageLarge;						image.visible = false;			imageLarge.visible = true;			imageLarge.setSize(image.width,image.width)						var largeImageWidth:Number = 150;			var largeImageHeight:Number = 150;						var bgHeight:Number = largeImageHeight + 42			var bgY:Number = -(bgHeight/2)			Tweener.addTween(bg, { x:bg.x+10,width:largeImageWidth+10, height:bgHeight, y:bgY, time:FreeSpin.ANIMATION_SPEED,transition:"easeInOutCubic" });						var assetWidth:Number = imageLarge.assetWidth;			var assetHeight:Number = imageLarge.assetHeight;			var deltaWidth:Number = Math.max(0,largeImageWidth - assetWidth)			var deltaHeight:Number = Math.max(0,largeImageHeight - assetHeight);			Tweener.addTween(imageLarge, { x:deltaWidth/2+10, y: (-largeImageHeight/2) + deltaHeight/2, width:largeImageWidth, height:largeImageHeight, _autoAlpha:1,time:FreeSpin.ANIMATION_SPEED, transition:"easeInOutCubic"});										if(!hasLargeImage) {				var imageNotFound:MovieClip = imageHolder.imageNotFound;				imageNotFound.visible = true				Tweener.addTween(imageNotFound, {x:10, y: (-largeImageHeight/2), width:largeImageWidth, height:largeImageHeight, time:FreeSpin.ANIMATION_SPEED, transition:"easeInOutCubic"});			}			var newLabelX:Number = bg.x + 3 + 10;			var labelY:Number = largeImageHeight/2 - 11;			Tweener.addTween(label_txt, { x:newLabelX, y:labelY, time:FreeSpin.ANIMATION_SPEED,transition:"easeInOutCubic"});			Tweener.addTween(type_txt, { x:newLabelX, y:labelY+14, time:FreeSpin.ANIMATION_SPEED,transition:"easeInOutCubic"});					}		public function animateToSmall():void{						var image:ExternalAsset = imageHolder.image;			var imageLarge:ExternalAsset = imageHolder.imageLarge;						Tweener.addTween(bg, { width:180, height:40, y:-20, time:FreeSpin.ANIMATION_SPEED,transition:"easeInOutCubic" });			Tweener.addTween(imageLarge, { x:image.x, y: image.y , width:image.width, height:image.height, _autoAlpha:1,time:FreeSpin.ANIMATION_SPEED, transition:"easeInOutCubic"});										if(!hasLargeImage) {				var imageNotFound:MovieClip = imageHolder.imageNotFound;				imageNotFound.visible = true				Tweener.addTween(imageNotFound, { y: image.y, width:image.width, height:image.height, time:FreeSpin.ANIMATION_SPEED, transition:"easeInOutCubic"});			}			Tweener.addTween(label_txt, { x:-50, y:-15, time:FreeSpin.ANIMATION_SPEED,transition:"easeInOutCubic"});			Tweener.addTween(type_txt, { x:-50, y:0, time:FreeSpin.ANIMATION_SPEED,transition:"easeInOutCubic"});					}		protected var $dataModel:PropertyQueryResult;		public function set dataModel(p_dataModel:PropertyQueryResult):void{			$dataModel = p_dataModel;			label = $dataModel.name;						if($dataModel.propertyQuery != null) {				type = $dataModel.propertyQuery.objectType;			}						var image:Object = $dataModel.image			if(image != null) {				var guid:String = image.guid								if(guid.length > 0) {					var imageWidth:Number = 150;					var imageHeight:Number = 150;					imageHolder.imageLarge.width = imageWidth;					imageHolder.imageLarge.height = imageHeight;					imageHolder.image.addEventListener("complete", onLoadImage, false, 0, true);					imageHolder.imageLarge.addEventListener("complete", onLoadLargeImage, false, 0, true);					loadImage(DataManager.getThumbURL(guid,imageHolder.image.width,imageHolder.image.height))					loadLargeImage(DataManager.getThumbURL(guid,imageWidth,imageHeight))				}			} else {				// we need to wait a frame				addEventListener("enterFrame", onNoLoadDelay, false, 0, true);			}					}				public function get dataModel():PropertyQueryResult{			return $dataModel;		}		private function onNoLoadDelay (p_event:Event):void{			removeEventListener("enterFrame",onNoLoadDelay)			FreeSpin.getInstance().onLoadNode(this)		}		public function loadImage(p_url:String):void{			imageHolder.image.load(p_url);			}				private function onLoadImage (p_event:Event):void{			imageHolder.imageNotFound.visible = false;		}				public function loadLargeImage(p_url:String):void{			imageHolder.imageLarge.visible = false;			imageHolder.imageLarge.load(p_url);		}				private function onLoadLargeImage (p_event:Event):void{			$hasLargeImage = true;			FreeSpin.getInstance().onLoadNode(this)		}				protected var $hasLargeImage:Boolean=false;		public function set hasLargeImage ( p_hasLargeImage:Boolean ):void{			$hasLargeImage = p_hasLargeImage;					}		public function get hasLargeImage ():Boolean{			return $hasLargeImage;		}				protected var $label:String;		public function set label ( p_label:String ):void{			$label = p_label;				label_txt.htmlText = $label;				}		public function get label ():String{			return $label;		}		protected var $type:String;		public function set type ( p_type:String ):void{			$type = p_type;			type_txt.text = p_type;				}		public function get type ():String{			return $type;		}				protected var $isFocused:Boolean;		public function set isFocused ( p_isFocused:Boolean ):void{			$isFocused = p_isFocused;			if($isFocused) {				highlight.visible = false;				if(link != null) link.showHighlight(false);				hitRegion.mouseEnabled = false;				if(go_btn != null) {					go_btn.visible = false;				}								add_btn = new ButtonAdd();				addButtonHolder.addChild(add_btn)				add_btn.visible = false				add_btn.x = -40;				add_btn.addEventListener("click", onClickAdd, false, 0, true);				Tweener.addTween(add_btn, {_autoAlpha:1, x:0, time:.5,delay:2});							} 		}				public function get isFocused ():Boolean{			return $isFocused;		}		private function onClickAdd (p_event:Event):void{			if(editView == null) {				editView = new EditView();				editView.addEventListener("save", onClickSave, false, 0, true);				editViewHolder.addChild(editView)				editView.y = -editView.bg.height;				editView.addEventListener("cancel", onCancelEdit, false, 0, true);				Tweener.addTween(editView, { y:0, time:.5});								var connections:Object = FreeSpin.getTypeLinkConnections();				var types:Array = $dataModel["types:type"]					var objectType:Object				var i:Number = types.length;				while(i--) {					var t:String = types[i]					if(connections[t] != null) {						objectType = connections[t]					}				}				if(objectType != null) {					var linkTypes:Array = []										for (var j:String in objectType){						var linkData:Object = objectType[j]						linkTypes.push ({	label:j,															type:linkData.type,															link:linkData.link,															rootProperty:linkData.rootProperty,															property:linkData.property})					}										linkTypes.sortOn('label')										linkTypes.unshift({label:"Select...",name:null})										editView.dropDown.dataModel = linkTypes;									}			}		}				private function onClickSave (p_event:Event):void{			var targetModel = editView.autoComplete.selectedDataModel			var linkTypeModel = editView.dropDown.selectedItem().dataModel			trace(JSON.log(targetModel))			//trace(JSON.log(linkTypeModel))									var parameters = {};									if(linkTypeModel.property != null ) {				parameters.create = 'cvt'				parameters.cvttype = linkTypeModel.link								parameters.id0 = $dataModel.guid;								if(!targetModel.createNew) {					parameters.id1 = targetModel.guid;				} else {					// if new use name1					parameters.name1 = targetModel.name;				}								parameters.prop0 = linkTypeModel.rootProperty				parameters.prop1 = linkTypeModel.property							} else {				parameters.create = 'link';				parameters.from = $dataModel.guid;								if(!targetModel.createNew) {					parameters.to = targetModel.guid				} else {					// if new use name					parameters.name = targetModel.name;				}								parameters.linktype = linkTypeModel.link			}						trace(JSON.log(parameters))						//var url = "http://dev.mqlx.com/~tim/venturespin/test.cgi"			var url = "http://dev.mqlx.com/~tim/venturespin/sandbox.cgi"			var loader:URLLoader = DataManager.getData(url,false,parameters,onSave);		}				private function onSave (p_event:Event):void{			trace("onSave = " + p_event);						editView.showProgress(false)			var loader:URLLoader = URLLoader(p_event.target);			var result:Object = JSON.decode(loader.data);			trace(JSON.log(result))			FreeSpin.getInstance().refresh();								Tweener.addTween(editView, { y:-editView.bg.height, time:.5,onComplete:function() {this.parent.removeChild(this)}});			editView = null		}				private function onCancelEdit (p_event:Event):void{						Tweener.addTween(editView, { y:-editView.bg.height, time:.5,onComplete:function() {this.parent.removeChild(this)}});			editView = null		}				protected var $link:FreeSpinLink;		public function set link ( p_link:FreeSpinLink ):void{			$link = p_link;					}		public function get link ():FreeSpinLink{			return $link;		}			}}