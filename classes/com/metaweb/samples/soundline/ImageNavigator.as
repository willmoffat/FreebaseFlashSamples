////  ImageNavigator//  Created by Ketan Anjaria on 2007-03-21.//  Copyright (c) 2007 __MyCompanyName__. All rights reserved.//package com.metaweb.samples.soundline {	import flash.display.*		import flash.text.*;	import flash.events.*;	import flash.net.*;	import flash.geom.*;		import metaliq.core.*		import com.metaweb.samples.soundline.*;		public class ImageNavigator extends Component {		public var contentArea:Sprite;		public var contentMask:Sprite;		public var contentHolder:Sprite;		public var content:Bitmap;		public var bitmapData:BitmapData;		public var contentSource:DisplayObject;		/**		 * Creates a new ImageNavigator component instance.		 * com.metaweb.samples.soundline.ImageNavigator		 */		public function ImageNavigator() { 			super();		}				override protected function configUI() : void {			super.configUI();			content = new Bitmap()			contentHolder.addChild(content)			swapChildren(contentArea,getChildAt(numChildren-1))			contentArea.addEventListener(MouseEvent.MOUSE_DOWN, onPressContent, false, 0, true);			contentArea.visible = false;			addEventListener("click", onClick, false, 0, true);		}		private function onClick(p_event:Event):void{				contentArea.x = mouseX - contentArea.width/2				contentArea.y = mouseY - contentArea.height/2;			updatePosition();		}		private function onPressContent(p_event:Event):void{			contentArea.startDrag(false,new Rectangle(0,0,width-contentArea.width,height-contentArea.height));			stage.addEventListener(MouseEvent.MOUSE_MOVE, onMoveMouse, false, 0, true);			stage.addEventListener(MouseEvent.MOUSE_UP, onReleaseContent, false, 0, true);		}		private function onMoveMouse(p_event:Event):void{			updatePosition();		}		private function onReleaseContent(p_event:Event):void{			updatePosition();			stage.removeEventListener(MouseEvent.MOUSE_MOVE,onMoveMouse)			stage.removeEventListener(MouseEvent.MOUSE_UP,onReleaseContent)			contentArea.stopDrag();		}		override public function draw() : void {			super.draw();		}		public function updatePosition():void{			var newX = Math.min(contentArea.x,width - contentArea.width)			newX = Math.max(0,newX)			contentArea.x = newX;						var newY = Math.min(contentArea.y,height - contentArea.height)				newY = Math.max(0,newY)			contentArea.y = newY;			dispatchEvent(new Event("change"))					}				protected var $contentPositionX:Number=0;		public function set contentPositionX(p_contentPositionX:Number):void{			$contentPositionX = p_contentPositionX;			contentArea.x = $contentPositionX*$contentScale;			updatePosition();		}		public function get contentPositionX():Number{			return $contentPositionX;		}		protected var $contentPositionY:Number=0;		public function set contentPositionY(p_contentPositionY:Number):void{			$contentPositionY = p_contentPositionY;			contentArea.y = $contentPositionY*$contentScale;			updatePosition();		}		public function get contentPositionY():Number{			return $contentPositionY;		}		protected var $contentScale:Number=1;		public function set contentScale(p_contentScale:Number):void{			$contentScale = p_contentScale;					}		public function get contentScale():Number{			return $contentScale;		}				// the object that decided how much of the content is visible		protected var $contentViewArea:DisplayObject;		public function set contentViewArea(p_contentViewArea:DisplayObject):void{			$contentViewArea = p_contentViewArea;			contentArea.width = $contentViewArea.width * $contentScale;			contentArea.height = $contentViewArea.height * $contentScale;			update();		}		public function get contentViewArea():DisplayObject{			return $contentViewArea;		}		public function addToContent(display:DisplayObject):void{			contentSource = display;			contentPositionX = 0;			contentPositionY = 0;		}		public function update():void{						if(contentSource != null) {				var matrix : Matrix = new Matrix();				matrix.scale($contentScale,$contentScale);				if(bitmapData != null) {					bitmapData.dispose()				}				bitmapData = new BitmapData($width, $height, true,0x00FFFFFF);							bitmapData.draw(contentSource,matrix);				content.bitmapData = bitmapData;				contentArea.visible = true;			}		}	}}