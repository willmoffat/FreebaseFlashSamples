////  SoundLine//  Created by Ketan Anjaria on 2007-03-13.//  Copyright (c) 2007 __MyCompanyName__. All rights reserved.//package com.metaweb.samples.soundline {	import flash.display.*		import flash.text.*;	import flash.events.*;	import flash.net.*;	import com.metaweb.*;	import com.metaweb.samples.soundline.*;		import com.adobe.serialization.json.*;	import caurina.transitions.*;		import metaliq.core.*;	import metaliq.events.*;		import com.kidbombay.util.*;			public class SoundLine extends MovieClip {		public var browser:Browser;		public var timeline:TimelineNavigator;		public var contentMask:Sprite;		public var contentHolder:MovieClip;		public var genres:Array;		public var genresByName:Object;		public var genreHolder:Sprite;		public var artists:Array;		public var artistsById:Object;		public var artistHolder:Sprite;		public var dragRegion:Sprite;		private var $startDragX:Number;		private var $startDragY:Number;				static public var WIDTH_PER_YEAR:Number = 100;		static public var LINE_COLORS:Array = [0x559EBD,0x84BD55,0xD98B54,0xFF6371,0x755AD4,0xB655BD,0x977B60]				static private var $instance:SoundLine;		static public function getInstance():SoundLine{			return $instance;		}		/**		 * Creates a new SoundLine component instance.		 * com.metaweb.samples.soundline.SoundLine		 */		public function SoundLine() {			$instance = this;						// get flash vars			Environment.getFlashVars(this.root);			var baseURL:String = Environment.getValue("baseURL");			if(baseURL != null) {				DataManager.BASE_URL = baseURL;			} else {				Environment.setValue("baseURL","http://www.freebase.com")			}								genres = [];			genresByName = {};			genreHolder = new Sprite();			contentHolder.addChild(genreHolder)						artists = [];			artistsById = {};			artistHolder = new Sprite();			contentHolder.addChild(artistHolder);						browser.addEventListener("changeArtists", onChangeArtists, false, 0, true);			browser.addEventListener("changeOpen", onChangeOpen, false, 0, true);			browser.imageLoupe.contentSource = artistHolder;						timeline.addEventListener(DynamicListEvent.ITEM_CLICK, onSelectTime, false, 0, true);			timeline.list.addEventListener("draw", onDrawTimeline, false, 0, true);			dragRegion.addEventListener(MouseEvent.MOUSE_DOWN, onStartDrag, false, 0, true);						stage.addEventListener(MouseEvent.MOUSE_UP, onStopDrag, false, 0, true);						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						stage.addEventListener("resize", onResize, false, 0, true);			setSize(stage.stageWidth,stage.stageHeight)		}		private function onChangeOpen(p_event:Event):void{			setSize(stage.stageWidth,stage.stageHeight);		}		private function onResize(p_event:Event):void{			setSize(stage.stageWidth,stage.stageHeight);		}		public function setSize(width,height):void{			dragRegion.width = contentMask.width = timeline.listMask.width = width;			timeline.y = height - 43;						var contentY:uint = browser.opened ? browser.y + browser.height + 12 : browser.y + 36 + 12;			var contentHeight:uint = height - contentY - 43 - 12			contentMask.height = dragRegion.height = contentHeight;			contentMask.y = dragRegion.y = contentY;			//Tweener.addTween(dragRegion, { height:contentHeight, y:contentY, time:.5, transition:"easeOutExpo"});			//Tweener.addTween(contentMask, { height:contentHeight,y:contentY, time:.5, transition:"easeOutExpo"});						browser.imageNav.contentViewArea = contentMask;					}		private function onDrawTimeline(p_event:Event):void{						var contentScale:Number = browser.imageNav.width/timeline.list.width;						browser.imageNav.contentScale = contentScale;			browser.imageNav.contentViewArea = contentMask;			browser.imageNav.contentSource = artistHolder;			browser.imageNav.addEventListener("change", onNavigateImage, false, 0, true);					}		private function onNavigateImage(p_event:Event):void{			var imageNav:ImageNavigator = p_event.currentTarget as ImageNavigator;			var contentX:Number = imageNav.contentArea.x;			var contentY:Number = imageNav.contentArea.y;						var newX:Number = (contentX/imageNav.contentScale) * -1;			timeline.list.x = newX;			artistHolder.x = newX;						var newY:Number = (contentY/imageNav.contentScale) * -1;						genreHolder.y = artistHolder.y = newY;		}		private function onStartDrag(p_event:Event):void{			$startDragX = dragRegion.mouseX;			$startDragY = dragRegion.mouseY;			dragRegion.addEventListener(MouseEvent.MOUSE_MOVE, onDrag, false, 0, true);		}		private function onDrag(p_event:Event):void{			var deltaX:Number = dragRegion.mouseX - $startDragX;						var newX:Number = (artistHolder.x + deltaX)*-1;			newX = Math.min(timeline.list.width - timeline.width,newX)			newX = Math.max(0,newX)						browser.imageNav.contentPositionX = newX;									$startDragX = dragRegion.mouseX;						var deltaY:Number = dragRegion.mouseY - $startDragY;						var newY:Number = (artistHolder.y + deltaY) * -1;			newY = Math.min(artistHolder.height,newY)			newY = Math.max(0,newY);			browser.imageNav.contentPositionY = newY;									$startDragY = dragRegion.mouseY;					}		private function onStopDrag(p_event:Event):void{			dragRegion.removeEventListener(MouseEvent.MOUSE_MOVE,onDrag)		}		private function onSelectTime(p_event:DynamicListEvent):void{			var item:TimelineNavigatorItem = p_event.item as TimelineNavigatorItem;			var date:Date = item.dataModel.date as Date;			moveToDate(date)		}		private function onChangeArtists(p_event:Event):void{			//trace("onChangeArtists = " + onChangeArtists);			var availableArtists:Array = browser.currentArtists;						var artist:Object;			var i:uint = availableArtists.length;			var artistsToKeep:Object = {};			// if no items in browser artist list remove all artists			if(length == 0) {				removeAllArtists();			}			while(i--) {				artist = availableArtists[i];				//trace("artist = " + artist.name);				var guid:String = artist.guid				if(!artist.selected) {					removeArtist(guid)									} else {					artistsToKeep[guid] = artist;					if(artistsById[guid] != null) {						// already exists ignore						//trace("   exists")						continue;					} else {						//trace("   add")						// add to timeline						getArtistQuery(guid)					}				}			}			// loop throught all existing artists			// if they are not in the artist to keep remove theme			for(var j:String in artistsById) {				if(artistsToKeep[j] == null) {					removeArtist(j)				}			}		}				public function removeArtist(guid:String):void{			if (artistsById[guid] == null) return;			trace("removeArtist = " + guid);			var artistLine:ArtistLine = artistsById[guid] as ArtistLine;						// remove from genre			var genreLine:GenreLine = artistLine.genreLine;			var items:Array = genreLine.items;			var i:uint = items.length;			while(i--) {				var foundLine:ArtistLine = items[i] as ArtistLine;				if(foundLine == artistLine) {					items.splice(i,1)					break;				}			}			if(items.length == 0 ) {				// remove genre;				removeGenre(genreLine)			}			delete artistsById[guid];			artistLine.parent.removeChild(artistLine);						redraw();		}		public function removeAllArtists():void{			//trace("removeAllArtists = " + removeAllArtists);			for(var id:String in artistsById) {				removeArtist(id);			}			redraw();		}		public function removeGenre(genreLine:GenreLine):void{			var i:uint = genres.length;			//  remove from genreArray			while(i--) {				var foundLine:GenreLine = genres[i] as GenreLine;				if(foundLine == genreLine) {					genres.splice(i,1)					break;				}			}			delete genresByName[genreLine.label];						genreLine.parent.removeChild(genreLine);					}				public function getArtistQuery(guid:String):void{			trace("getArtistQuery = " + guid);			var query:String = '{ "query":{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "active_end":[{ "optional":true, "value":null }], "active_start":[{ "optional":true, "value":null }], "album":[{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "guid":null, "name":null, "release_date":{ "value":null }, "release_type":[{ "name":null, "optional":true }], "sort":"release_date.value", "track":[{ "guid":null, "length":null, "name":null }] }], "genre":[{}], "guid":"' + guid + '", "member":[{ "member":{ "/common/topic/image":[{ "guid":null, "limit":1, "optional":true }], "guid":null, "name":null, "type":"/music/group_member" }, "optional":true }], "name":null, "origin":[{}], "type":"/music/artist" } }';						browser.showProgress(true)			DataManager.getQuery(JSON.decode(query),onGetArtistQuery)		}		private function onGetArtistQuery(p_event:Event):void{			browser.showProgress(false)			var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);			//trace(JSON.log(result))			if(result.result.query == null || result.result.query.length == 0) {				//setMessage("No Results Found")				return;			}									addArtist(result.result.query)		}		public function getDatesForArtist(artist:Object):Object{			var dates:Object = {};			var startTime:Number=0			var endTime:Number=0			var lastAlbumTime:Number=0;			// number of millisconds in year			var yearTime:Number = 31536000000						if(artist.active_start.length > 0) {				startTime = DataManager.parseDate(artist.active_start[0].value).getTime();			}			var useActiveEnd:Boolean = false;			if(artist.active_end.length > 0) {				useActiveEnd = true;				endTime = DataManager.parseDate(artist.active_end[0].value).getTime();				if(artist.active_end[0].value.length == 4) {					// if only year known add 1 year					endTime+=yearTime;				}			}			var length:uint = artist.album.length;			for ( var i:uint = 0; i < length; i++ ) {				var album:Object = artist.album[i];								var type:String = "album"								if(album.release_type != null && album.release_type.name != null) {					type = album.release_type.name.toLowerCase();				}								//if(type != "album" && type != "live album" && type != "ep") continue;				if(type != "album" ) continue;				//trace("album = " + album.name);				var albumTime:Number = DataManager.parseDate(album.release_date.value).getTime();				//trace("albumTime = " + albumTime);				startTime = Math.min(startTime,albumTime)				if(!useActiveEnd) {					// only max endTime if the value does not exist from active_end					endTime = Math.max(endTime,albumTime)				}				lastAlbumTime = Math.max(lastAlbumTime,albumTime)			}			if(!useActiveEnd) {				// if no active end, add 1 year to the endTime				endTime+=yearTime;			}			dates.startDate = new Date(startTime)			dates.endDate = new Date(endTime);			dates.lastAlbumTime = new Date(lastAlbumTime)			//trace("startTime = " + startTime);			//trace("endTime = " + endTime);			//trace("lastAlbumTime = " + lastAlbumTime);						return dates;		}		public function addArtist(artist:Object):void{			//trace(JSON.log(artist))						if (artistsById[artist.guid] != null ) return;						// figure out genre			var genre:String = "UNKNOWN"			if(artist.genre != null && artist.genre.length > 0 ) {				// use first genre				genre = artist.genre[0].name;			}			var genreLine:GenreLine = addGenre(genre)						//parse dates			var artistDates:Object = getDatesForArtist(artist);						artist.startDate = artistDates.startDate;			artist.endDate = artistDates.endDate;			artist.lastAlbumDate = artistDates.lastAlbumDate;						var newX:Number = getXForDate(artist.startDate)			var endX:Number = getXForDate(artist.endDate)						var artistLine:ArtistLine = new ArtistLine();			addEventsForArtistLine(artistLine)						// set color			var genreItems:Number = genreLine.items.length;			var colorIndex:uint = genreItems % SoundLine.LINE_COLORS.length;			var color:Number = SoundLine.LINE_COLORS[colorIndex]			artistLine.color = color;						// set position			artistLine.x = newX;					//set width 			artistLine.width = endX - newX;						artistLine.dataModel = artist;						// add to display			artistHolder.addChild(artistLine);						artistsById[artist.guid] = artistLine;			// add item for this genre			genreLine.addItem(artistLine)						redraw();			moveToArtistLine(artistLine)		}		public function addEventsForArtistLine(p_artistLine:ArtistLine):void{			p_artistLine.addEventListener(MouseEvent.ROLL_OVER, onOverArtistLine, false, 0, true);			p_artistLine.addEventListener("changeLock", onChangeLock, false, 0, true);			p_artistLine.addEventListener("delete", onDeleteArtistLine, false, 0, true);		}		private function onOverArtistLine(p_event:Event):void{			var artistLine:ArtistLine = p_event.currentTarget as ArtistLine;			artistLine.bringToFront();		}		private function onDeleteArtistLine(p_event:Event):void{			trace("onDeleteArtistLine = " + onDeleteArtistLine);			var artistLine:ArtistLine = p_event.currentTarget as ArtistLine;			browser.deselectID(artistLine.dataModel.guid);					}		private function onChangeLock(p_event:Event):void{			var artistLine:ArtistLine = p_event.currentTarget as ArtistLine;						var locked:Boolean = artistLine.lock_btn.selected;			browser.setLockForID(artistLine.dataModel.guid,locked)		}		public function setLockForID(p_guid:String,p_locked:Boolean):void{						var artistLine:ArtistLine = artistsById[p_guid] as ArtistLine;			artistLine.lock_btn.selected = p_locked;					}				public function redraw():void{			var length:uint = genres.length;						var newY:Number = 0;						for ( var i:uint = 0; i < length; i++ ) {				var genreLine:GenreLine = genres[i];				genreLine.y = newY;				genreLine.bringToFront();				newY+=1;				var genreItems:Array = genreLine.items;				var itemsLength:uint = genreItems.length;				for ( var j:uint = 0; j < itemsLength; j++ ) {					var artistLine:ArtistLine = genreItems[j]										artistLine.y = newY + 9					artistLine.bringToFront();										var marginY:Number = 9;										if(artistLine.hasEventImages) marginY += 109										newY+= artistLine.height + marginY;				}				newY+= 9 + Math.max(genreLine.height,9);			}						browser.imageNav.update();			browser.imageLoupe.update();		}		public function getXForDate(p_date):Number{			var year:uint = p_date.getFullYear();			var yearDelta:uint = year - 1900;			var newX:Number = (yearDelta * SoundLine.WIDTH_PER_YEAR);			var months:uint = p_date.getMonth();						if(months > 0) {				newX+= (SoundLine.WIDTH_PER_YEAR/12) * months;			}			return Math.round(newX); 		}		public function moveToArtistLine(artistLine:ArtistLine):void{			browser.imageLoupe.contentX = artistLine.x;			Tweener.addTween(browser.imageNav, { contentPositionX:artistLine.x-36,time:1, transition:"easeOutExpo"});			Tweener.addTween(browser.imageNav, { contentPositionY:artistLine.y-300,time:1, transition:"easeOutExpo"});		}		public function moveToDate(p_date:Date):void{			var newX:Number = getXForDate(p_date) * -1 + 36;			newX = Math.max(timeline.list.width*-1 + timeline.width,newX) * -1;					Tweener.addTween(browser.imageNav, { contentPositionX:newX,time:1, transition:"easeOutExpo"});					}				public function addGenre(genre:String):GenreLine{			genre = genre.toUpperCase();						var genreLine:GenreLine			if(genresByName[genre] != null) {				return genresByName[genre] as GenreLine			}			genreLine = new GenreLine();			genreLine.label = genre.toUpperCase();			genreHolder.addChild(genreLine);			genres.push(genreLine)			genresByName[genreLine.label] = genreLine;			return genreLine		}	}}