////  Browser//  Created by Ketan Anjaria on 2007-03-13.//  Copyright (c) 2007 __MyCompanyName__. All rights reserved.//package com.metaweb.samples.soundline {	import flash.display.*		import flash.text.*;	import flash.events.*;	import flash.net.*;	import flash.utils.*;		import fl.containers.ScrollPane;	import metaliq.core.*;	import metaliq.events.*;		import com.adobe.serialization.json.*;		import com.metaweb.*;	import com.metaweb.samples.soundline.*;		import com.kidbombay.net.*;		import caurina.transitions.*;		public class Browser extends Component {				public var listHolder:Sprite;		public var decadePane:ScrollPane;		public var genrePane:ScrollPane;		public var artistPane:ScrollPane;				public var decadeList:DynamicList;		public var genreList:DynamicList;		public var artistList:DynamicList;				public var imageNav:ImageNavigator;		public var imageLoupe:ImageLoupe;		public var search_txt:TextField;		public var go_btn:FrameButton;		public var currentArtists:Array;		public var artistsByID:Object;		public var progressCircle:MovieClip;		public var btn_disclose:FrameButton;		public var contentMask:Sprite;		public var bg:Sprite;		public var border:Sprite;		private var $timer:Timer;		private var $decadesSelected:uint=0;		private var $genresSelected:uint=0;		/**		 * Creates a new Browser component instance.		 * com.metaweb.samples.soundline.Browser		 */		public function Browser() { 			super();		}				override protected function configUI() : void {			super.configUI();			addEventListener("keyUp", onKeyUp, false, 0, true);						search_txt.addEventListener("click", onClickSearchText, false, 0, true);			go_btn.addEventListener("click", onClickSearch, false, 0, true);						currentArtists = [];			artistsByID = {};						artistPane = new ScrollPane();			listHolder.addChild(artistPane)			artistPane.setStyle('focusRectSkin', Sprite);			artistPane.x = 403;			artistPane.y = 55;			artistPane.horizontalScrollPolicy = "off"			artistPane.width = 200;			artistPane.height = 180;			artistPane.source = "metaliq.core.DynamicList";						artistList = artistPane.content as DynamicList;			artistList.defaultItemClass = "com.metaweb.samples.soundline.BrowserListItem";			artistList.addEventListener(DynamicListEvent.ITEM_CLICK, onSelectArtist, false, 0, true);			artistList.addEventListener("draw", onDrawList, false, 0, true);			artistList.addEventListener(DynamicListEvent.CUSTOM, onCustomEvent, false, 0, true);			artistList.owner = this;									decadePane = new ScrollPane();			listHolder.addChild(decadePane)			decadePane.setStyle('focusRectSkin', Sprite);			decadePane.x = 1;			decadePane.y = 55;			decadePane.horizontalScrollPolicy = "off"			decadePane.width = 200;			decadePane.height = 180;			decadePane.source = "metaliq.core.DynamicList";			decadeList = decadePane.content as DynamicList;			decadeList.defaultItemClass = "com.metaweb.samples.soundline.BrowserListItem";			decadeList.addEventListener(DynamicListEvent.ITEM_CLICK, onSelectDecade, false, 0, true);			decadeList.addEventListener("draw", onDrawList, false, 0, true);			var startYear:uint = 1900;			var endYear:uint = new Date().getFullYear() + 1			for(var i:uint = startYear; i < endYear;i+=10) {				var dataModel:Object = {};				dataModel.date = new Date(i,0);				dataModel.name = String(i) + " - " + (i+9)				decadeList.addItem(dataModel)			}						genrePane = new ScrollPane();			listHolder.addChild(genrePane)			genrePane.setStyle('focusRectSkin', Sprite);			genrePane.x = 202;			genrePane.y = 55;			genrePane.horizontalScrollPolicy = "off"			genrePane.width = 200;			genrePane.height = 180;			genrePane.source = "metaliq.core.DynamicList";			genreList = genrePane.content as DynamicList;			genreList.defaultItemClass = "com.metaweb.samples.soundline.BrowserListItem";			genreList.addEventListener(DynamicListEvent.ITEM_CLICK, onSelectGenre, false, 0, true);			genreList.addEventListener("draw", onDrawList, false, 0, true);						updateScrollPanes();						btn_disclose.toggle = true;			btn_disclose.selected = true;			btn_disclose.addEventListener("click", onClickDisclose, false, 0, true);						imageNav.addEventListener(MouseEvent.ROLL_OVER, onOverImageNav, false, 0, true);			imageNav.addEventListener(MouseEvent.ROLL_OUT, onOutImageNav, false, 0, true);									$timer = new Timer(1000,1)			$timer.addEventListener("timerComplete", onDelayImageLoupe, false, 0, true);			imageLoupe.visible = false;			imageLoupe.alpha = 0;			imageLoupe.y = imageNav.y + imageNav.height;						getAllGenres();						search_txt.text = "Pearl Jam"			submitSearch();					}		private function onOverImageNav (p_event:Event):void{			$timer.start();			imageNav.addEventListener(MouseEvent.MOUSE_MOVE, onMoveImageNav, false, 0, true);		}		private function onDelayImageLoupe(p_event:Event):void{						imageLoupe.contentX = imageNav.mouseX/imageNav.contentScale;			imageLoupe.contentY = imageNav.mouseY/imageNav.contentScale;						imageLoupe.visible = true;			Tweener.addTween(imageLoupe, { alpha:1, time:.5, transition:"easeOutExpo"});			Tweener.addTween(imageLoupe, { y:mouseY + 20, time:.5, transition:"easeOutExpo"});		}		public function positionLoupe():void{			var newX:Number = mouseX - imageLoupe.width/2			newX = Math.min($width-imageLoupe.width - 2,newX)			var newY:Number = mouseY + 20;			imageLoupe.x = newX;			imageLoupe.y = newY;		}		private function onOutImageNav(p_event:Event):void{			$timer.stop();			imageNav.removeEventListener(MouseEvent.MOUSE_MOVE,onMoveImageNav)			Tweener.addTween(imageLoupe, { alpha:0, time:.5, transition:"easeOutExpo",onComplete:onAnimateOut});			Tweener.addTween(imageLoupe, { y:imageNav.y + imageNav.height, time:.5, transition:"easeOutExpo"});		}		private function onAnimateOut():void{			imageLoupe.visible = false;		}		private function onMoveImageNav(p_event:Event):void{			positionLoupe();			imageLoupe.contentX = imageNav.mouseX/imageNav.contentScale;			imageLoupe.contentY = imageNav.mouseY/imageNav.contentScale;		}		private function onClickDisclose(p_event:Event):void{			opened = btn_disclose.selected;			dispatchEvent( new Event("changeOpen") )		}		protected var $opened:Boolean = true;		public function set opened(p_opened:Boolean):void{			$opened = p_opened;			invalidate();		}		public function get opened():Boolean{			return $opened;		}		public function deselectID(p_guid:String):void{			var i:uint = artistList.items.length;			while(i--) {				var item:BrowserListItem = artistList.items[i];				if(item.dataModel.guid == p_guid) {					item.selected = false;					var event:DynamicListEvent = new DynamicListEvent(DynamicListEvent.ITEM_CLICK,false,false,item.column,item.row);					event.item = item					artistList.dispatchEvent(event);					break;				}			}		}		public function setLockForID(p_guid:String,p_locked:Boolean):void{						var i:uint = artistList.items.length;			while(i--) {				var item:BrowserListItem = artistList.items[i];				if(item.dataModel.guid == p_guid) {					item.locked = p_locked;					break;				}			}					}				public function onCustomEvent(p_event:DynamicListEvent):void{			trace("onCustomEvent = " + p_event);			var item:BrowserListItem = p_event.item as BrowserListItem;			var dataModel:Object = item.dataModel;			var guid:String = dataModel.guid;			if(p_event.detail == "changeLock") {				SoundLine.getInstance().setLockForID(guid,item.locked)			}		}				public function showProgress(p_show:Boolean):void{			if(p_show) {				progressCircle.gotoAndPlay("on")			} else {				progressCircle.gotoAndStop("off")			}		}		public function clearSearch():void{			search_txt.text = "";		}		private function onSelectArtist(p_event:Event):void{			trace("onSelectArtist = " + onSelectArtist);			dispatchEvent(new Event("changeArtists"));		}		private function onSelectGenre(p_event:Event):void{			clearSearch();			updateScrollPanes();						updateDecadeAndGenre();								}		public function updateDecadeAndGenre():void{			var genreQueries:Array = [];			var genreIDs:Array = [];			$genresSelected = 0;						var length:uint = genreList.items.length;			for ( var i:uint = 0; i < length; i++ ) {				var item:BrowserListItem  = genreList.items[i] as BrowserListItem;				if(item.selected) {					var guid:String = item.dataModel.guid					var genreQuery:String = '"genre' + genreQueries.length + '":' + makeGenreQuery(guid)					genreQueries.push(genreQuery)					genreIDs.push('"' + guid + '"')					$genresSelected++;				}							}						var allGenresQuery:String = '{' + genreQueries.toString() + "}"						var decadeQueries:Array = [];			var decades:Array = [];			$decadesSelected = 0;			length = decadeList.items.length;			for ( i = 0; i < length; i++ ) {				item  = decadeList.items[i] as BrowserListItem;				if(item.selected) {					var startYear:Number = item.dataModel.date.getFullYear();										var decadeQuery:String = '"decade' + decadeQueries.length + '":' + makeDecadeQuery(startYear)					decadeQueries.push(decadeQuery)					decades.push(startYear)					$decadesSelected++;				}							}						var allDecadesQuery:String = '{' + decadeQueries.toString() + "}"						if($genresSelected == 0 && $decadesSelected > 0) {				getDecadeQuery(allDecadesQuery);			} if($decadesSelected == 0 && $genresSelected > 0) {				getGenreQuery(allGenresQuery);			} else if($decadesSelected > 0 && $genresSelected > 0) {				getDecadeAndGenreQuery(decades,genreIDs)			}		}		public function getDecadeAndGenreQuery(p_decades:Array,p_genres:Array):void{			var genres:String = p_genres.toString();			var decadeQueries:Array = [];			var length:Number = p_decades.length;						for ( var i:int = 0; i < length; i++ ) {				var decadeQuery:String = '"decade' + decadeQueries.length + '":' + makeDecadeAndGenreQuery(p_decades[i],genres)				decadeQueries.push(decadeQuery)			}						var allDecadesQuery:String = '{' + decadeQueries.toString() + "}";						removeUnlockedArtists();			showProgress(true)						var loader:URLLoader = DataManager.getQueries(JSON.decode(allDecadesQuery),onGetDecadeQuery)			LoadManager.addThread("decadeGenreQuery",loader)		}		public function getGenreQuery(query:String):void{			removeUnlockedArtists();			showProgress(true)						var loader:URLLoader = DataManager.getQueries(JSON.decode(query),onGetGenreQuery)			LoadManager.addThread("decadeGenreQuery",loader)		}		private function onGetGenreQuery(p_event:Event):void{			showProgress(false);			var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);			var i:uint = 0;			do {				var genre:Object = result["genre"+i];				if(genre != null) {					var artists:Array = genre.result;					var length:uint = artists.length;					for ( var j:uint = 0; j < length; j++ ) {						addArtist(artists[j])					}				}				i++;			} while (genre != null);						updateArtists();		}				private function onSelectDecade(p_event:Event):void{			clearSearch();			updateScrollPanes();						updateDecadeAndGenre();					}		public function getDecadeQuery(query:String):void{			removeUnlockedArtists();			showProgress(true)						var loader:URLLoader = DataManager.getQueries(JSON.decode(query),onGetDecadeQuery)			//loader.addEventListener(IOErrorEvent.IO_ERROR, onGetSearchQueryError)			LoadManager.addThread("decadeGenreQuery",loader)		}		private function onGetDecadeQuery(p_event:Event):void{			showProgress(false);			var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);			var i:uint = 0;			do {				var decade:Object = result["decade"+i];				if(decade != null) {					var artists:Array = decade.result;					var length:uint = artists.length;					for ( var j:uint = 0; j < length; j++ ) {						addArtist(artists[j])					}				}				i++;			} while (decade != null);						updateArtists();		}				public function removeUnlockedArtists():void{			var artistsToKeep:Array = [];			var i:uint = artistList.length;			while(i--) {				//trace("i = " + i);				var artist:Object = artistList.items[i].dataModel;				//trace("artist = " + artist.name);				//trace("   artist.locked = " + artist.locked);				if(artist.locked == true) {					//trace("   keep")					artistsToKeep.push(artist)					artistsByID[artist.guid] = artist				} else {					// remove from hash					//trace("   delete")					delete artistsByID[artist.guid]				}			}						// set artistsToKeep as currentArtist			currentArtists = artistsToKeep;						currentArtists.sortOn("name")			artistList.dataModel = currentArtists;			dispatchEvent(new Event("changeArtists"));		}		public function addArtist(artist:Object):void{			//trace(JSON.log(artist))			var id:String = artist.guid;			//trace("addArtist id = " + id);			artist.isLockable = true;			if(artistsByID[id] == null) {				currentArtists.push(artist);				artistsByID[id] = artist;			} else {				//trace("   exists")			}		}		public function updateArtists():void{			currentArtists.sortOn("name");						setSearchResults(currentArtists)		}		private function onDrawList(p_event:Event):void{			updateScrollPanes();		}		public function updateScrollPanes():void{			decadePane.update();			genrePane.update();			artistPane.update();			artistPane.drawNow();		}		private function onKeyUp(p_event:KeyboardEvent):void{			var charCode:Number = p_event.charCode;			if(charCode == 13) {				submitSearch();			}		}		private function onClickSearchText(p_event:Event):void{			search_txt.setSelection(0,search_txt.length)		}				private function onClickSearch(p_event:Event):void{			submitSearch();		}		public function submitSearch():void{			if(search_txt.text.length > 0) {				getSearchQuery(search_txt.text)			}		}		public function getAllGenres():void{			var query:String = '{ "query":[{ "guid":null, "limit":1000, "name":null, "sort":"name", "type":"/music/genre" }] }';			showProgress(true)			var loader:URLLoader = DataManager.getQuery(JSON.decode(query),onGetAllGenres)			LoadManager.addThread("getAllGenres",loader)					}		private function onGetAllGenres(p_event:Event):void{						showProgress(false)						var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);			//trace(JSON.log(result))						genreList.dataModel = result.result.query;						updateScrollPanes();							}				public function makeGenreQuery(p_guid:String):String{			var query:String = '{ "query":[{ "album":[{ "limit":1, "release_date":{ "value":null } }], "genre":{ "guid":"' + p_guid + '", "name":null, "type":"/music/genre" }, "guid":null, "limit":1000, "name":null, "sort":"name", "type":"/music/artist" }] }'			return query		}				public function makeDecadeQuery(p_startYear:Number):String{			var endYear:Number = p_startYear + 10;			var query:String = '{ "query":[{ "active_start":[{ "value":null }], "album":[{ "limit":1, "release_date":{ "value<":"' + endYear + '", "value>=":"' + p_startYear + '", "value":null } }], "guid":null, "limit":1000, "name":null, "sort":"name", "type":"/music/artist" }] }';						return query;		}		public function makeDecadeAndGenreQuery(p_startYear:Number,p_genres:String):String{			trace("makeDecadeAndGenreQuery = " + p_startYear);			trace("p_genres = " + p_genres);			var endYear:Number = p_startYear + 10;			var query:String = '{ "query":[{ "active_start":[{ "value":null }], "album":[{ "limit":1, "release_date":{ "value<":"' + endYear + '", "value>=":"' + p_startYear + '", "value":null } }], "genre":[{ "guid|=":[' + p_genres +'], "guid":null }], "guid":null, "limit":1000, "name":null, "sort":"name", "type":"/music/artist" }] }'			return query;		}		public function getSearchQuery(p_search:String):void{						//unselect decade items;			$decadesSelected = 0;			var items:Array = decadeList.items;			var length:uint = items.length;			for ( var i:uint = 0; i < length; i++ ) {				items[i].selected = false;			}						//unselect genre items;			$genresSelected = 0;			items = genreList.items;			length = items.length;			for ( i = 0; i < length; i++ ) {				items[i].selected = false;			}						removeUnlockedArtists();									var query:String = '{ "query":[{ "album":[{ "limit":1, "release_date":{ "value":null } }], "guid":null, "limit":1000, "name~=":"' + p_search + '*", "name":null, "sort":"name", "type":"/music/artist" }] }'						showProgress(true)			//setMessage("")			var loader:URLLoader = DataManager.getQuery(JSON.decode(query),onGetSearchQuery)			loader.addEventListener(IOErrorEvent.IO_ERROR, onGetSearchQueryError)			LoadManager.addThread("artistSearch",loader)		}				private function onGetSearchQueryError(p_event:Event):void{			trace("onGetSearchQueryError = " + onGetSearchQueryError);			showProgress(false);			//setMessage("Server not available. You might need to login to " + Environment.getValue("baseURL") + " first.")		}				private function onGetSearchQuery(p_event:Event):void{						showProgress(false)						var loader:URLLoader = URLLoader(p_event.target);			var result = JSON.decode(loader.data);			//trace(JSON.log(result))			var items:Array = result.result.query;			var length:uint = items.length;			for ( var i:uint = 0; i < length; i++ ) {				addArtist(items[i])			}							updateArtists();			if(length == 1) {				artistList.selectedIndex = (0);			}					}		public function setSearchResults(results:Array):void{			artistList.dataModel = results;			artistPane.verticalScrollPosition = 0;						updateScrollPanes();						dispatchEvent(new Event("changeArtists"));		}		override public function draw() : void {			var closeHeight:uint = 36;			if(!$opened) {				Tweener.addTween(border, { height:closeHeight,time:.5, transition:"easeOutExpo"});				Tweener.addTween(bg, { height:closeHeight-2,time:.5, transition:"easeOutExpo"});				Tweener.addTween(contentMask, { height:closeHeight,time:.5, transition:"easeOutExpo"});			} else {				Tweener.addTween(border, { height:$height,time:.5, transition:"easeOutExpo"});				Tweener.addTween(bg, { height:$height-2,time:.5, transition:"easeOutExpo"});				Tweener.addTween(contentMask, { height:$height,time:.5, transition:"easeOutExpo"});			}			super.draw();		}			}}