////  DataManager//  Created by Ketan Anjaria on 2007-03-01.//  Copyright (c) 2007 __MyCompanyName__. All rights reserved.//package com.metaweb {	import flash.display.*		import flash.text.*;	import flash.events.*;	import flash.net.*;	import flash.external.*;		import com.adobe.serialization.json.*;	import com.kidbombay.util.*;		public class DataManager extends EventDispatcher {				static private var $instance:DataManager;		static public var BASE_URL:String = "http://sandbox.freebase.com/"; // the metaweb host		static public var LOGIN_SERVICE:String = "api/account/login"; // Path to login service		static public var LOJSON_READ_PATH = "api/service/loread";		static public var LOJSON_WRITE_PATH = "api/service/lowrite";		static public var HIJSON_READ_PATH = "api/service/mqlread";		static public var HIJSON_WRITE_PATH = "api/service/mqlwrite";		static public var readPath = HIJSON_READ_PATH;		static public var writePath = HIJSON_WRITE_PATH;		static public var RAW_PATH : String = "api/trans/raw/"		static public var BLURB_PATH:String = "api/trans/blurb/";		static public var THUMB_PATH : String = "api/trans/image_thumb/"		static public var LINK_PATH : String = "view";						/**		 * Creates a new DataManager component instance.		 * com.metaweb.DataManager		 */				public function DataManager( caller : Function = null ) {	            if( caller != DataManager.getInstance )                throw new Error ("DataManager is a Singleton class, use getInstance() instead");            if ( DataManager.$instance != null )                throw new Error( "Only one DataManager instance should be instantiated" );			}		public static function getInstance() : DataManager {			if ( $instance == null ) {				$instance = new DataManager( arguments.callee );			}			return $instance;		}				static function cacheBust():String {			//return "";			return new Date().getTime().toString();		}		static public function login(p_userName:String,p_password:String,p_completeHandler:Function=null): void {			getData(LOGIN_SERVICE,false,{username:p_userName,password:p_password},p_completeHandler)					}		static public function parseDate(p_date:String):Date{			if(p_date == null) return null;						var parts:Array = p_date.split("-")			if(parts.length < 0) {				return null			}			var year:uint = Number(parts[0]);			var month:uint = 0;			if(parts.length > 1) {				month = Number(parts[1]-1)			}			var day:uint = 1;			if(parts.length > 2) {				day = Number(parts[2])			}			return new Date(year,month,day);		}		static public function getQuery(p_query:*,p_completeHandler:Function=null):URLLoader{			var query:String = JSON.encode(p_query)			/*trace("query = " + query);*/			/*trace("query = " + JSON.log(p_query));*/			var loader:URLLoader = getData(HIJSON_READ_PATH,false,{q:query},p_completeHandler,true)			return loader;		}		static public function getQueries(p_queries:*,p_completeHandler:Function=null):URLLoader{			var queries:String = JSON.encode(p_queries)			trace("queries = " + queries);			var loader:URLLoader = getData(HIJSON_READ_PATH,false,{queries:queries},p_completeHandler,true);			return loader;		}		static public function getRawURL(p_id:String):String{			return BASE_URL + RAW_PATH + escape(p_id);		}		static public function getThumbURL(p_id:String,p_maxWidth:Number,p_maxHeight:Number):String{			return BASE_URL + THUMB_PATH + escape(p_id) + '?maxwidth='+p_maxWidth+'&maxheight='+p_maxHeight;		}		static public function getLink(p_id:String):String{			return BASE_URL + LINK_PATH + "?id="+escape(p_id);		}		static public function getBlurb(p_id:String,p_maxLength:Number,p_completeHandler:Function=null):URLLoader{			var loader:URLLoader = getData(BLURB_PATH + escape(p_id),true,{maxlength:p_maxLength},p_completeHandler,true)			return loader;		}		static public var credentials:String = "A|u_ketananjaria|g_#9202a8c04000641f8000000003e02f58|4.X0GiAFKVQ+NP7DLzJC7iZA";														static public function getData(p_method:String,p_get:Boolean = true,p_parameters:*=null,p_completeHandler:Function=null,p_authorize:Boolean=false):URLLoader {			var loader:URLLoader = new URLLoader();			//trace("getData = " + p_method);			if(p_parameters == null) {				p_parameters = {};				p_parameters.noCache = cacheBust();			}			var methodType:String = p_get ? URLRequestMethod.GET : URLRequestMethod.POST;			//trace("   methodType = " + methodType);			var useBase:Boolean = p_method.indexOf("http") == -1			var url:String = useBase ? BASE_URL + p_method : p_method			//trace("   url = " + url);			var request:URLRequest = new URLRequest(url);			request.method = methodType;						var variables:URLVariables = new URLVariables();			for(var i in p_parameters) {				variables[i] = p_parameters[i];			}			//variables.noCache = cacheBust();			request.data = variables;			if(p_authorize && !Environment.isInBrowser()) {				var authHeader:URLRequestHeader = new URLRequestHeader("Cookie","metaweb-user="+credentials);				//add the header to request				//request.requestHeaders.push(authHeader);			}			/*trace("   request.url: = " + request.url+"?"+request.data);*/						getInstance().configureListeners(loader);			if(p_completeHandler != null) {				loader.addEventListener(Event.COMPLETE,p_completeHandler)			}			try {				loader.load(request);			} catch (error:*) {				trace("   Unable to load requested document. " + error);			}			return loader;		}				private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler);            //dispatcher.addEventListener(Event.OPEN, openHandler);            //dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }		private function completeHandler(event:Event):void {			//trace("completeHandler = " + event);			//var loader:URLLoader = URLLoader(event.target);			//trace("   loader.data = " + loader.data);					}		private function openHandler(event:Event):void {			//trace("openHandler: " + event);		}		private function progressHandler(event:ProgressEvent):void {			//trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);		}		private function securityErrorHandler(event:SecurityErrorEvent):void {			trace("securityErrorHandler: " + event);		}		private function httpStatusHandler(event:HTTPStatusEvent):void {			//trace("httpStatusHandler: " + event);		}		private function ioErrorHandler(event:IOErrorEvent):void {			trace("ioErrorHandler: " + event);		}	}}