////  DynamicList////  Created by Ketan Anjaria on 2006-08-29.//  Copyright (c) 2006 __MyCompanyName__. All rights reserved.//package metaliq.core {	import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.utils.*;	import metaliq.core.*;	import metaliq.events.*;	//import metaliq.tween.Tween;		public class DynamicList extends Component {		public static var LAYOUT_VERTICAL:String = "vertical";		public static var LAYOUT_HORIZONTAL:String = "horizontal";		public static var LAYOUT_GRID:String = "grid";		public var holder:Sprite;				// @property					Array of movieclips		protected var $items:Array;		protected var $dataModel : Array;		protected var $defaultItemClass:String = "metaliq.core.DynamicListItem";		protected var $marginX:Number = 0;		protected var $marginY:Number = 0;				protected var $columns:int = 1;		protected var $rows:int = 0;				// vertical, horizontal, grid		protected var $layout:String = LAYOUT_VERTICAL				protected var $selectedIndex:int=-1;		protected var $selectedItem:DynamicListItem;			/**		 * Creates a new DynamicList component instance.		 * metaliq.core.DynamicList		 */		public function DynamicList() { super(); }				/**		 * @private		 */		override protected function configUI():void {			super.configUI();			$items = [];			holder = new Sprite();			holder.name = "holder";			addChildAt(holder,0);		}		public function set dataModel (p_object:Array) : void		{				$dataModel = p_object;			removeItems();			var length : int = $dataModel.length;			for (var i : int = 0; i < length; i++) {					addItem(p_object[i]);			}						invalidate();		}				public function get dataModel () : Array		{			return $dataModel;		}		public function removeItems():void {			var i : int = $items.length;			while(i--) {				removeItem(i);			}						removeChild(holder);			$items = [];			holder = new Sprite();			holder.name = "holder";			addChildAt(holder,0);		}				public function removeItem(p_index:int):void {					var item : DynamicListItem = $items[p_index];			$items.splice(p_index,1);						holder.removeChild(item);			invalidate();		}		protected function addItemListeners(p_target:DisplayObject):void{			p_target.addEventListener(MouseEvent.ROLL_OVER,itemHandler) 			p_target.addEventListener(MouseEvent.ROLL_OUT,itemHandler) 			p_target.addEventListener(MouseEvent.MOUSE_DOWN,itemHandler) 			p_target.addEventListener(MouseEvent.CLICK,itemHandler)		}		public function addItemAt(p_dataModel:Object,p_index:Number): DynamicListItem {						var item:DynamicListItem = getSkinInstance($defaultItemClass) as DynamicListItem;						if(item == null ) {				trace("DynamicList.ERROR $defaultItemClass " + $defaultItemClass + " is invalid");				return null;			}					if(item.useHitRegion && item.hitRegion != null) {				addItemListeners(item.hitRegion)			} else {				addItemListeners(item);			}						item.listOwner = this;						if(p_index >= $items.length) {				p_index = $items.length;				$items.push(item);			} else {				$items.splice(p_index,0,item);			}						item.name = "item"+p_index;			item.index = p_index;						item.dataModel = p_dataModel;						holder.addChildAt(item,p_index);								invalidate();						return item;		}		public function swapItemsAt(p_index1:Number,p_index2:Number):void{			//trace("swapItemsAt = " + p_index1 + " with " + p_index2);			// TO DO cap based on length;			var item1 = $items[p_index1];			var item2 = $items[p_index2];			$items[p_index2] = item1;			$items[p_index1] = item2;			invalidate();		}		public function addItem(p_dataModel:Object):DynamicListItem {						return addItemAt(p_dataModel,$items.length);					}				public function setLayout(p_layout:String, p_marginY:Number,p_marginX:Number,p_columns:int):void {			$layout = p_layout;			$columns = p_columns;			$marginY = p_marginY;			$marginX = p_marginX;						invalidate();		}		private function itemHandler(p_event:MouseEvent): void {			var type : String = p_event.type;			var item:DynamicListItem = p_event.currentTarget as DynamicListItem;			if(item == null) {				item = p_event.currentTarget.parent as DynamicListItem;			}			switch ( p_event.type ) {				case MouseEvent.MOUSE_OVER :					type = DynamicListEvent.ITEM_ROLL_OVER					break;				case MouseEvent.MOUSE_OUT :					type = DynamicListEvent.ITEM_ROLL_OUT					break;				case MouseEvent.CLICK:					setSelectedIndex(item.index);					type = DynamicListEvent.ITEM_CLICK					break;				case MouseEvent.MOUSE_DOWN:					type = DynamicListEvent.ITEM_DOWN;					break;			}					var event:DynamicListEvent = new DynamicListEvent(type,false,false,item.column,item.row);			event.item = item			dispatchEvent(event);		}		[Inspectable(type="DynamicList", defaultValue="vertical", enumeration="vertical,horizontal,grid")]		public function set layout (p_layout:String) : void		{			$layout = p_layout;			invalidate();		}		public function get layout () : String		{		   return $layout;		}				[Inspectable(type="Number", defaultValue="1")]		public function set columns (p_columns:int) : void		{		  $columns = p_columns;		  invalidate();		  		}		public function get columns () : int		{		   return $columns;		}				[Inspectable(type="Number", defaultValue="0")]		public function set marginX (p_marginX:Number) : void		{		  $marginX = p_marginX;		  invalidate();		  		}		public function get marginX () : Number		{		   return $marginX;		}				[Inspectable(type="Number", defaultValue="0")]		public function set marginY (p_marginY:Number) : void		{		  $marginY = p_marginY;		  invalidate();		  		}		public function get marginY () : Number		{		   return $marginY;		}				public function setSelectedIndex(p_index:int,p_fireEvent:Boolean=false):void {			var item : DynamicListItem = $items[p_index];						$selectedIndex = p_index;						// deselect old item			if($selectedItem != item && $selectedItem != null && !$selectedItem.toggle) {				$selectedItem.selected = false;			}						if(item == null) return;						// update new item			$selectedItem = item;						if(!$selectedItem.toggle) {				$selectedItem.selected = true;			} else {				$selectedItem.selected = !$selectedItem.selected			}						if(p_fireEvent) {				var event:DynamicListEvent = new DynamicListEvent(DynamicListEvent.ITEM_CLICK,false,false,item.column,item.row,item);				dispatchEvent(event);			}		}				public function set selectedIndex(p_index:int):void {			setSelectedIndex(p_index,true);		}		public function get selectedIndex():int {			return $selectedIndex;		}		public function incrementIndex(p_increment:int):void{			var newIndex:int = $selectedIndex + p_increment;			newIndex = Math.min($items.length-1,Math.max(0,newIndex));			selectedIndex = newIndex;		}		public function getItem(p_index:int):DynamicListItem {			return $items[p_index];		}		public function selectedItem():DynamicListItem {			return $selectedItem;		}		public function get items():Array {			return $items;		}		public function get length ():int {			return $items.length;		}		public function updateLayout():void{			if($layout == LAYOUT_VERTICAL) {				$rows = 0;				$columns = 1;			} else if($layout == LAYOUT_HORIZONTAL) {				$rows = 1;				$columns = 0;			} else if($layout == LAYOUT_GRID) {				$columns = $columns;				$rows = 0;			}					}		protected var $customDraw:Function;		public function set customDraw(p_customDraw:Function):void{			$customDraw = p_customDraw;					}		public function get customDraw():Function{			return $customDraw;		}		override public function draw():void {						if($items == null) return;			var length:int = $items.length;			if( length == 0) return;						updateLayout();						var realRows : int = $rows;			var realColumns : int = $columns;						if(realRows == 0) {				realRows = Math.floor((length + realColumns - 1 ) / realColumns);			} else {				realColumns = Math.floor((length + realRows - 1) / realRows);			}						if(length < realColumns) {				realColumns = length;							}			var column:int = 0;			var row:int = 0;			var posX :Number = 0;			var posY : Number = 0;						var i : Number = 0;						while(i < length) {				var item:DynamicListItem = $items[i];				item.x = posX;				item.y = posY;								item.column = (column);				item.row = (row);				item.index = (i);				item.draw();								++i;				++column;								if(column < realColumns) {					posX+= Math.round((item.width+$marginX));				} else {					column = 0;					posY+= Math.round((item.height+$marginY));										++row;					posX = 0;					} 			}									if(customDraw != null) {				customDraw();			}						$height = holder.height;			$width = holder.width;			super.draw();		}		public function animateDraw():void {			var length:int = $items.length;			if( length == 0) return;						updateLayout();						var realRows : int = $rows;			var realColumns : int = $columns;						if(realRows == 0) {				realRows = Math.floor((length + realColumns - 1 ) / realColumns);			} else {				realColumns = Math.floor((length + realRows - 1) / realRows);			}						if(length < realColumns) {				realColumns = length;			}			var column:int = 0;			var row:int = 0;			var posX :Number = 0;			var posY : Number = 0;						var i : Number = 0;			while(i < length) {				var item:DynamicListItem = $items[i];				//var tween:Tween = new Tween(item,"x",posX,.5);				//tween = new Tween(item,"y",posY,.5);				//item.x = posX;				//item.y = posY;								item.column = (column);				item.row = (row);				item.index = (i);				item.width = $width;				item.visible = true;								++i;				++column;								if(column < realColumns) {					posX+= Math.round((item.width+$marginX));				} else {					column = 0;					posY+= Math.round((item.height+$marginY));										++row;					posX = 0;					} 			}		}		public function set defaultItemClass(p_itemClass:String) : void {			$defaultItemClass = p_itemClass		}		public function get defaultItemClass() : String {			return $defaultItemClass		}	}}