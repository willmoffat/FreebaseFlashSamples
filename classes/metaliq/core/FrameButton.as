////  FrameButton////  Created by Ketan Anjaria on 2006-08-29.//  Copyright (c) 2006 Metaliq Inc. All rights reserved.//package metaliq.core{	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import flash.utils.*;	import metaliq.core.*;	public class FrameButton extends Component {		public var label_txt:TextField;		protected var $frame:String = "falseUp";		protected var $isFrameAnimated:Boolean = true;				/**		 * Creates a new FrameButton component instance.		 * metaliq.core.FrameButton		 */		public function FrameButton() {			super();		}		override protected function configUI():void {			super.configUI();			buttonMode = true;			mouseChildren = false;			if (hitRegion != null) {				hitArea = hitRegion;			}			if (useHitRegion && hitRegion != null) {				setupMouseEvents(hitRegion);			} else {				setupMouseEvents(this);			}			setupMouseEvents(this);			setFrame("falseUp",$isFrameAnimated);		}		protected function setupMouseEvents(p_target:DisplayObject):void {			p_target.addEventListener(MouseEvent.ROLL_OVER,mouseEventHandler,false,0,true);			p_target.addEventListener(MouseEvent.MOUSE_DOWN,mouseEventHandler,false,0,true);			p_target.addEventListener(MouseEvent.CLICK,mouseEventHandler,false,0,true);			p_target.addEventListener(MouseEvent.ROLL_OUT,mouseEventHandler,false,0,true);		}		public function setFrame(p_frame:String,p_play:Boolean=false):void {			if ($enabled){				$frame = p_frame			} else {				$frame = "disabled"			}			if (p_play && $isFrameAnimated) {				gotoAndPlay($frame);			} else {				gotoAndStop($frame);			}			draw();		}		public function getFrame():String {			return $frame;		}		public function set isFrameAnimated(p_isFrameAnimated):void {			$isFrameAnimated = p_isFrameAnimated;		}		public function get isFrameAnimated():Boolean {			return $isFrameAnimated;		}		protected function mouseEventHandler(p_event:MouseEvent):void {			var type:String = p_event.type;			var pre:String = String($selected);			if (type == MouseEvent.MOUSE_DOWN) {				setFrame(pre+"Down",true);			} else if (type == MouseEvent.ROLL_OVER) {				setFrame(pre+"Over",true);			} else if (type == MouseEvent.CLICK) {				if ($toggle) {					// change selected state					selected = !selected;				} else {					setFrame(pre+"Up",true);				}			} else if (type == MouseEvent.ROLL_OUT) {				if ($hasOutState) {					setFrame(pre+"Out",true);				} else {					setFrame(pre+"Up",true);				}			}		}		override public function set enabled(p_enabled:Boolean):void {			super.enabled = p_enabled;			mouseEnabled = p_enabled;			setFrame($enabled ? "falseUp" : "disabled" ,true);		}		override public function get enabled():Boolean {			return super.enabled;		}		protected var $toggle:Boolean = false;		public function set toggle(p_toggle:Boolean):void {			if (!p_toggle && $selected) {				selected = false;			}			$toggle = p_toggle;		}		public function get toggle():Boolean {			return $toggle;		}		protected var $selected:Boolean = false;		public function set selected(p_selected:Boolean):void {			if (p_selected == $selected) {				return;			}			$selected = p_selected;			if ($disableOnSelect) {				enabled = (!$selected);			}			var pre:String = String($selected);			setFrame(pre+"Up",true);		}		public function get selected():Boolean {			return $selected;		}		protected var $disableOnSelect:Boolean = false;		public function set disableOnSelect(p_disableOnSelect:Boolean):void {			$disableOnSelect = p_disableOnSelect;		}		public function get disableOnSelect():Boolean {			return $disableOnSelect;		}		protected var $hasOutState:Boolean = false;		public function set hasOutState(p_hasOutState:Boolean):void {			$hasOutState = p_hasOutState;			// does this button have an outstate?		}		public function get hasOutState():Boolean {			return $hasOutState;		}		protected var $label:String;		public function set label(p_label:String):void {			if (p_label == null) {				p_label = "";			}			$label = p_label;			if (label_txt == null) {				return;			}			label_txt.text = p_label;		}		public function get label():String {			return $label;		}		protected var $useHitRegion:Boolean=false;		public function set useHitRegion(p_useHitRegion:Boolean):void {			$useHitRegion = p_useHitRegion;		}		public function get useHitRegion():Boolean {			return $useHitRegion;		}	}}